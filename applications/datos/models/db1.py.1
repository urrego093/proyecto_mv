# -*- coding: utf-8 -*-
#Define DAL object, with max 10 connection 
db1 = DAL(STR_DAL, pool_size=10)

#Auth
from gluon.tools import Auth, Service, PluginManager

auth = Auth(db1)
service = Service()
plugins = PluginManager()

## create all tables needed by auth if not custom tables
auth.define_tables(username=False, signature=False)

## configure email
mail = auth.settings.mailer
mail.settings.server = 'logging' if request.is_local else myconf.take('smtp.server')
mail.settings.sender = myconf.take('smtp.sender')
mail.settings.login = myconf.take('smtp.login')

## configure auth policy
auth.settings.registration_requires_verification = False
auth.settings.registration_requires_approval = False
auth.settings.reset_password_requires_verification = True




db1.define_table('course',
                Field('code_course','integer', length=3, label=T('Course Code'),requires=IS_NOT_EMPTY()),
                Field('name_course','string', length=60, label=T('Course Name'), requires=IS_NOT_EMPTY()),
                Field('description_course','text'),label=T('Course Description'))
db1.course.code_course.requires=IS_NOT_IN_DB(db1, db1.course.code_course)

db1.define_table('machine',
                Field('ip_machine', label=T('IPv4 Machine'), requires=IS_IPV4(minip='10.20.251.1', maxip='10.20.251.255')),
                Field('code_course','reference course', label=T('Code Course'), requires=IS_IN_DB(db1,db1.course.id, '%(name_course)s')),
                Field('operative_system','string', label=T('Operative System'), requires=IS_IN_SET(OPERA_SYSTEM, zero=T('Choose One'), error_message='You no choose one')),
                Field('memory','string',label=T('Memory RAM'), requires=IS_IN_SET(RAM_MEMORY, zero=T('Choose One'), error_message='You no choose one')),
                Field('processor','string',label=T('Processor'), requires=IS_IN_SET(PROCESSOR, zero=T('Choose One'), error_message='You no choose one')),
                Field('description_machine','text',label=T('Description'),requires=IS_NOT_EMPTY()))

db1.machine.ip_machine.requires=IS_NOT_IN_DB(db1, db1.machine.ip_maquine)
