(dp1
S'output'
p2
S"<class 'gluon.contrib.pg8000.ProgrammingError'> ('ERROR', '23503', 'inserci\\xc3\\xb3n o actualizaci\\xc3\\xb3n en la tabla \\xc2\\xabport_machine\\xc2\\xbb viola la llave for\\xc3\\xa1nea \\xc2\\xabport_machine_ip_machine_fkey\\xc2\\xbb')"
p3
sS'layer'
p4
S'/home/Carlos/Documentos/cloneGit/proyecto_mv/applications/datos/controllers/usuarios.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# intente algo como\n#def index(): return dict(message="hello from usuarios.py")\nimport evaluar_expresion\n\n@auth.requires_login()\ndef crear():\n    ids = request.vars["ids"]\n    form = SQLFORM.factory(\n        Field(\'user_name\', label=\'User name\', requires=IS_NOT_EMPTY()),\n        Field(\'password\', \'password\', label=\'Password\', requires=[IS_LENGTH(minsize=6), IS_STRONG(min=6,special=0, upper=1)]),\n        Field(\'confirm_password\', \'password\', label=\'Confirm password\', requires=[\n                IS_STRONG(min=6, special=0, upper=1), IS_EQUAL_TO(request.vars.password, error_message=\'passwords do not match\')]),\n        Field(\'admin\', \'boolean\', label=\'Admin\')\n    ).process()\n\n    if form.accepted:\n        name = request.vars.user_name\n        name = evaluar_expresion.evaluar(name)\n        registrar_host(ids, name)\n        password = request.vars.password\n        admin = \'yes\' if request.vars.admin else \'no\'\n\n        variables_extra = dict( remote=\'all\', username=name, password=password, admin=admin, action="create_user")\n        #redirect(URL(\'mostrar\'))\n        redirect(URL(\'maquinas\', \'ejecutar\', vars= dict(ids=ids, opcion=\'user\', variables_extra = variables_extra))) ## asi se pasan las variables ingresadas por el usuario\n\n    return dict(form=form)\n\n@auth.requires_login()\ndef eliminar_usuario():\n    ids = request.vars["ids"]\n    form = SQLFORM.factory(\n        Field(\'user_name\', label=T(\'User name\'), requires=IS_NOT_EMPTY())\n    ).process()\n\n    if form.accepted:\n        name = request.vars.user_name\n        name = evaluar_expresion.evaluar(name)\n        print \'NAME ES :\' , name\n        variables_extra = dict( remote=\'all\', username=name, action=\'delete_user\')\n        redirect(URL(\'maquinas\', \'ejecutar\', vars= dict(ids=ids, opcion="user", variables_extra = variables_extra)))\n    return dict(form= form)\n\n\n@auth.requires_login()\ndef cambiar_pass():\n    ids = request.vars["ids"]\n    form = SQLFORM.factory(\n        Field(\'user_name\', label=\'User name\', requires=IS_NOT_EMPTY()),\n        Field(\'password\', \'password\', label=\'Password\', requires=[IS_LENGTH(minsize=6), IS_STRONG(min=6,special=0, upper=1)]),\n        Field(\'confirm_password\', \'password\', label=\'Confirm password\', requires=[\n                IS_STRONG(min=6, special=0, upper=1), IS_EQUAL_TO(request.vars.password, error_message=\'passwords do not match\')])\n    ).process()\n\n    if form.accepted:\n        name = request.vars.user_name\n        name = evaluar_expresion.evaluar(name)\n\n        password = request.vars.password\n\n        variables_extra = dict( remote=\'all\', username=name, password=password, action="change_pass")\n        #redirect(URL(\'mostrar\'))\n        redirect(URL(\'maquinas\', \'ejecutar\', vars= dict(ids=ids, opcion=\'user\', variables_extra = variables_extra))) ## asi se pasan las variables ingresadas por el usuario\n    return locals()\n\n@auth.requires_login()\n@auth.requires_membership(\'Administrador\')\ndef registrar_host(ids,hosts):\n    for i in ids:\n        last_port = db1(db1.port_machine.ip_machine==i).select().last()\n        if last_port:\n            nexts = int(last_port.number_port)\n            for n in hosts:\n                nexts += 1\n                print "ANTIGUO", i, "port", nexts, "host", n\n                db1.port_machine.insert(ip_machine=i, number_port=nexts, hostname=n)\n                db1.commit()\n\n        else:\n            nexts = 5901\n            for n in hosts:\n                nexts += 1\n                print "NUEVO", i, "port", nexts, "host", n\n                db1.port_machine.insert(ip_machine=i, number_port=nexts, hostname=n)\n                db1.commit()\n\nresponse._vars=response._caller(crear)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/Carlos/Documentos/cloneGit/proyecto_mv/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/Carlos/Documentos/cloneGit/proyecto_mv/applications/datos/controllers/usuarios.py", line 88, in <module>\n  File "/home/Carlos/Documentos/cloneGit/proyecto_mv/gluon/globals.py", line 415, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/Carlos/Documentos/cloneGit/proyecto_mv/gluon/tools.py", line 4231, in f\n    return action(*a, **b)\n  File "/home/Carlos/Documentos/cloneGit/proyecto_mv/applications/datos/controllers/usuarios.py", line 20, in crear\n    registrar_host(ids, name)\n  File "/home/Carlos/Documentos/cloneGit/proyecto_mv/gluon/tools.py", line 4231, in f\n    return action(*a, **b)\n  File "/home/Carlos/Documentos/cloneGit/proyecto_mv/gluon/tools.py", line 4231, in f\n    return action(*a, **b)\n  File "/home/Carlos/Documentos/cloneGit/proyecto_mv/applications/datos/controllers/usuarios.py", line 85, in registrar_host\n    db1.port_machine.insert(ip_machine=i, number_port=nexts, hostname=n)\n  File "/home/Carlos/Documentos/cloneGit/proyecto_mv/gluon/packages/dal/pydal/objects.py", line 726, in insert\n    ret = self._db._adapter.insert(self, self._listify(fields))\n  File "/home/Carlos/Documentos/cloneGit/proyecto_mv/gluon/packages/dal/pydal/adapters/base.py", line 746, in insert\n    raise e\nProgrammingError: (\'ERROR\', \'23503\', \'inserci\\xc3\\xb3n o actualizaci\\xc3\\xb3n en la tabla \\xc2\\xabport_machine\\xc2\\xbb viola la llave for\\xc3\\xa1nea \\xc2\\xabport_machine_ip_machine_fkey\\xc2\\xbb\')\n'
p11
s.