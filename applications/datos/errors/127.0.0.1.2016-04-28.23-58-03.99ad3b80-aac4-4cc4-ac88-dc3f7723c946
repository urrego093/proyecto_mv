(dp1
S'output'
p2
S"<type 'exceptions.IndexError'> list index out of range"
p3
sS'layer'
p4
S'/home/camilo/Escritorio/repo_git/proyecto_mv/applications/datos/controllers/tasks.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# intente algo como\n\ndef index():\n    encabezado = T("These are your previous task")\n    \n    query_job = db1.job.user_id == auth.user_id\n    \n    campos_tarea = [db1.job.name, db1.job.action, db1.job.date] \n    \n    grid = SQLFORM.grid(query_job, fields = campos_tarea, csv=False, editable=False, deletable=False, \n        searchable=False, # No no moverlo, la busqueda no va a servir debido a q user_signature esta desativado\n        details=False, create=False, user_signature=False # Si se deja activada como es por defecto resulta en un error extrano, solo en este formulario\n        ,links=[\n            lambda row:(buscar_archivo(row.name)),\n            lambda row:A(T("View Resume"),_href=URL(\'tasks\', \'resumen\',args=(row.name)))\n        ]\n    )\n    return locals()\n\ndef resumen():\n    job_name = request.args(0)\n    trabajo = db1(db1.job.name == job_name).select()\n    boton_volver = INPUT(_value = T(\'Back\'),_type= "button", _class="btn btn-default", _onclick= "window.history.back();")\n    boton_descargar = INPUT(_value = T(\'Download Resume\'),_type= "button", _class="btn btn-primary")\n     \n    texto_execution = T("Execution Result")\n    print "----------------- /////////////// ------------", trabajo[0]\n    query_task = db1.scheduler_task.id == trabajo[0]["task_id"]\n   \n    campos_task = [db1.scheduler_task.status, db1.scheduler_task.start_time, db1.scheduler_task.next_run_time]\n    grid = SQLFORM.grid(query_task, fields = campos_task, csv=False, editable=False, deletable=False, \n        searchable=False, # No no moverlo, la busqueda no va a servir debido a q user_signature esta desativado\n        details=True, create=False, user_signature=False # Si se deja activada como es por defecto resulta en un error extrano, solo en este formulario\n        #,links=[ lambda row:([1,2])  ] # mejorar para mostra las ips ?\n    )\n    \n    return locals()\n\nresponse._vars=response._caller(resumen)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/camilo/Escritorio/repo_git/proyecto_mv/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/camilo/Escritorio/repo_git/proyecto_mv/applications/datos/controllers/tasks.py", line 40, in <module>\n  File "/home/camilo/Escritorio/repo_git/proyecto_mv/gluon/globals.py", line 415, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/camilo/Escritorio/repo_git/proyecto_mv/applications/datos/controllers/tasks.py", line 28, in resumen\n    print "----------------- /////////////// ------------", trabajo[0]\n  File "/home/camilo/Escritorio/repo_git/proyecto_mv/gluon/packages/dal/pydal/objects.py", line 2544, in __getitem__\n    row = self.records[i]\nIndexError: list index out of range\n'
p11
s.