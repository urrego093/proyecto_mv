(dp1
S'output'
p2
S"<type 'exceptions.NameError'> global name 'now' is not defined"
p3
sS'layer'
p4
S'/home/camilo/Escritorio/repo_git/web2py/applications/datos/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\n\n\ndef index():\n    response.flash = T("Hello People UD")\n    scheduler.queue_task(\n    #function,\n    "demo1",    \n    pargs=[1,2,3,4],\n    pvars={\'a\':\'foo\'},\n    start_time=now, \t\t#datetime\n    stop_time = None,\t\t#datetime\n    timeout = 60,               #seconds\n    prevent_drift=False,\n    #period=60,                  #seconds\n    immediate=False,\n    repeats = 1\n)\n    return locals();\n\n@auth.requires_membership(\'admin\')\ndef register_course():\n    form = SQLFORM(db1.course).process()\n    if form.accepted:\n        session.flash = T("Course Create!")\n        redirect(URL(\'index\'))\n    return locals()\n\n@auth.requires_login()\n@auth.requires_membership(\'admin\')\ndef agree_teacher():\n    rows = db1(db1.auth_user.registration_key==\'pending\').select()\n    return locals()\n\n\ndef show_teacher():\n    user = db1.auth_user(request.args(0, cast=int))\n    user.update(registration_key=\'\')\n    #db1.auth_user.firts_name = user.first_name\n    db1.auth_user.first_name.writable = False\n    db1.auth_user.first_name.reable = False\n    #db.blog_comments.blog_post.writable = False\n    #db.blog_comments.blog_post.redable = False\n    member = db1.auth_membership(request.args(0, cast=int))\n    member.update(group_id=2)\n    form = SQLFORM(db1.auth_user, user)\n    form2 = SQLFORM(db1.auth_membership, member)\n    form2.process()\n    if form.process().accepted:\n        response.flash = T (\'Teacher accepted\')\n    elif form.errors:\n        response.flash = T (\'form has errors\')\n    elif form2.errors:\n        response.flash = T (\'form has errors\')\n    #comments = db1(db1.blog_comments.blog_post==post.id).select()\n    return locals()\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\nresponse._vars=response._caller(index)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/camilo/Escritorio/repo_git/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/camilo/Escritorio/repo_git/web2py/applications/datos/controllers/default.py", line 103, in <module>\n  File "/home/camilo/Escritorio/repo_git/web2py/gluon/globals.py", line 415, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/camilo/Escritorio/repo_git/web2py/applications/datos/controllers/default.py", line 19, in index\n    start_time=now, \t\t#datetime\nNameError: global name \'now\' is not defined\n'
p11
s.