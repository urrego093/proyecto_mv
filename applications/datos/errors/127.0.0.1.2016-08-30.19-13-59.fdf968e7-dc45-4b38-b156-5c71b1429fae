(dp1
S'output'
p2
S"<type 'exceptions.IndexError'> list index out of range"
p3
sS'layer'
p4
S'/home/camilo/Escritorio/nuevo_nuevo_repo_git/proyecto_mv/applications/datos/controllers/packages_and_repos.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# essayez quelque chose comme\ndef index(): return dict(message="hello from packages_and_repos.py")\n\n@auth.requires_login()\ndef install_packages():\n    ids = request.vars["ids"]\n    accion = "install_packages"\n    form = SQLFORM.factory(  Field(\'paquetes\', label=\'Packages\', requires=IS_NOT_EMPTY()) ).process()\n    form[1][\'_align\'] = "center"\n    if form.accepted:\n        paquetes = request.vars.paquetes\n        paquetes = evaluar_expresion.separar_x_comas(paquetes)\n        #servicio = \'yes\' if request.vars.servicio else \'no\'\n\n        variables_extra = dict( remote=\'all\', paquetes=paquetes, accion=accion)\n                               #, admin=admin)\n        #redirect(URL(\'mostrar\'))\n        redirect(URL(\'maquinas\', \'ejecutar\', vars= dict(ids=ids, opcion=\'paquete\', variables_extra = variables_extra))) ## asi se pasan las variables ingresadas por el usuario\n                       \n    return dict(form=form)\n\n@auth.requires_login()\ndef remove_packages():\n    ids = request.vars["ids"]\n    accion = "remove_packages"\n    form = SQLFORM.factory(  Field(\'paquetes\', label=\'Packages\', requires=IS_NOT_EMPTY())).process()\n    if form.accepted:\n        paquetes = request.vars.paquetes\n        paquetes = evaluar_expresion.separar_x_comas(paquetes)\n        #servicio = \'yes\' if request.vars.servicio else \'no\'\n\n        variables_extra = dict( remote=\'all\', paquetes=paquetes, accion=accion)\n                               #, admin=admin)\n        #redirect(URL(\'mostrar\'))\n        redirect(URL(\'maquinas\', \'ejecutar\', vars= dict(ids=ids, opcion=\'paquete\', variables_extra = variables_extra))) ## asi se pasan las variables ingresadas por el usuario\n    return locals()\n\n@auth.requires_login()\ndef add_repositories():\n    ids = request.vars["ids"]\n    accion = "add_repo"\n    form = SQLFORM.factory(  Field(\'repositorios\', label=\'Repositories\', requires=IS_NOT_EMPTY())).process()\n    if form.accepted:\n        repositorios = request.vars.repositorios\n        repositorios = evaluar_expresion.separar_x_comas(repositorios)\n        #servicio = \'yes\' if request.vars.servicio else \'no\'\n\n        variables_extra = dict( remote=\'all\', repositorios=repositorios, accion=accion)\n                               #, admin=admin)\n        #redirect(URL(\'mostrar\'))\n        redirect(URL(\'maquinas\', \'ejecutar\', vars= dict(ids=ids, opcion=\'paquete\', variables_extra = variables_extra))) ## asi se pasan las variables ingresadas por el usuario           \n    return locals()\n\n@auth.requires_login()\ndef remove_repositories():\n    ids = request.vars["ids"]\n    accion = "remove_repo"\n    form = SQLFORM.factory(  Field(\'repositorios\', label=\'Repositories\', requires=IS_NOT_EMPTY())).process()\n    if form.accepted:\n        repositorios = request.vars.repositorios\n        repositorios = evaluar_expresion.separar_x_comas(repositorios)\n        #servicio = \'yes\' if request.vars.servicio else \'no\'\n\n        variables_extra = dict( remote=\'all\', repositorios=repositorios, accion=accion)\n                               #, admin=admin)\n        #redirect(URL(\'mostrar\'))\n        redirect(URL(\'maquinas\', \'ejecutar\', vars= dict(ids=ids, opcion=\'paquete\', variables_extra = variables_extra))) ## asi se pasan las variables ingresadas por el usuario                       \n    return locals()\n\nresponse._vars=response._caller(install_packages)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/camilo/Escritorio/nuevo_nuevo_repo_git/proyecto_mv/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/camilo/Escritorio/nuevo_nuevo_repo_git/proyecto_mv/applications/datos/controllers/packages_and_repos.py", line 71, in <module>\n  File "/home/camilo/Escritorio/nuevo_nuevo_repo_git/proyecto_mv/gluon/globals.py", line 415, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/camilo/Escritorio/nuevo_nuevo_repo_git/proyecto_mv/gluon/tools.py", line 4231, in f\n    return action(*a, **b)\n  File "/home/camilo/Escritorio/nuevo_nuevo_repo_git/proyecto_mv/applications/datos/controllers/packages_and_repos.py", line 10, in install_packages\n    form[1][\'_align\'] = "center"\n  File "/home/camilo/Escritorio/nuevo_nuevo_repo_git/proyecto_mv/gluon/html.py", line 785, in __getitem__\n    return self.components[i]\nIndexError: list index out of range\n'
p11
s.