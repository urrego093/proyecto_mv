(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> 'str' object has no attribute 'filename'"
p3
sS'layer'
p4
S'/home/camilo/Escritorio/nuevo_nuevo_repo_git/proyecto_mv/applications/datos/controllers/files.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# intente algo como\n\n@auth.requires_login()\ndef clean_machines(): \n    ids = request.vars["ids"]\n    form = FORM(_method=\'post\').confirm(T(\'Clean Machines\'),{T(\'Back\'):URL(\'maquinas\',\'mostrar\', vars=dict(accion= \'limpiar\'))})\n    form["_align"] = "center"\n\n    if form.accepted:\n        redirect(URL(\'maquinas\', \'ejecutar\', vars= dict(ids=ids, opcion=\'restart\')))\n        #print tarea\n    return dict(form=form)\n\n\n@auth.requires_login()\ndef copiar_archivos():\n    \n    #Recuperamos los ids\n    ids = request.vars["ids"]\n    #recuperamos el path para subir los archivos\n    folder_user = "uploads/" + str(auth.user_id) + "/"\n    ruta_basica = os.path.join(request.folder, folder_user)\n    \n    rows = db1(db1.port_machine.ip_machine==ids).select()\n    for row in rows:\n        HOSTNAME.append(row.hostname);\n    #url = URL(\'download\')\n    # https://groups.google.com/forum/#!topic/web2py/X5xmXyTCavY Checkbox Multiple\n    form = SQLFORM.factory(  Field("archivo", "upload", uploadfolder=ruta_basica, autodelete=True), #widget=SQLFORM.widgets.upload.widget),\n        Field("hostname", "list:string",\n              default=HOSTNAME,widget=SQLFORM.widgets.checkboxes.widget,\n              requires=[IS_IN_SET(HOSTNAME,multiple=True),IS_NOT_EMPTY()]))\n    \n    form.add_button(T(\'Back\'), URL(\'maquinas\',\'mostrar\', vars=dict(accion= \'copy_files\')) )\n\n    #var_extra = dict(origen=request.vars.archivo, somelist=request.vars.hostname)\n    var_extra = ""#"origen=" +str("") + "somelist=" + str(request.vars.hostname)\n\n    x = form.process()\n    #print "\\n\\n ********************************** \\n\\n"\n    if x.accepted:\n    #if form.accepts(request.vars, session):\n        #http://stackoverflow.com/questions/8008213/web2py-upload-with-original-filename todo un d\xc3\xada intentado hacer lo que este chico me soluciono :D\n        coded_name = form.vars.archivo\n        orig_name = request.vars.archivo.filename\n        os.rename(ruta_basica + coded_name, ruta_basica + orig_name) \n        ## ^ ^ comentar si se desea encriptar archivos, se debe tener algun registro en la base de datos para que no salga feo\n        redirect(URL(\'maquinas\',\'ejecutar\', vars= dict(ids=ids, opcion=\'copyFile\', variables_extra=dict(origen=ruta_basica + orig_name,\n                                                                                  somelist=request.vars.hostname))))\n    elif form.vars.archivo == None:\n            print "EL archivo es ------------------------ : "\n            print form.vars.archivo\n            response.flash = T("Please select a file")\n    return locals()\n\n\n\n@auth.requires_login()\ndef copiar_archivos_subidos():\n    #Recuperamos los ids\n    ids = request.vars["ids"]\n    #recuperamos el path para subir los archivos\n    folder_user = "uploads/" + str(auth.user_id) + "/"\n    ruta_basica = os.path.join(request.folder, folder_user)\n    orig_name =  request.vars.archi\n    rows = db1(db1.port_machine.ip_machine==ids).select()\n    for row in rows:\n        HOSTNAME.append(row.hostname);\n    #url = URL(\'download\')\n    # https://groups.google.com/forum/#!topic/web2py/X5xmXyTCavY Checkbox Multiple\n    form = SQLFORM.factory(  Field("archivo", "string", default = orig_name, writable= False), #widget=SQLFORM.widgets.upload.widget),\n        Field("hostname", "list:string",\n              default=HOSTNAME,widget=SQLFORM.widgets.checkboxes.widget,\n              requires=[IS_IN_SET(HOSTNAME,multiple=True),IS_NOT_EMPTY()]))\n    form.add_button(T(\'Back\'), URL(\'maquinas\',\'mostrar\', vars=dict(accion=\'re_copy_files\', archi= orig_name)))\n\n    if form.accepts(request.vars, session):\n        redirect(URL(\'maquinas\',\'ejecutar\', vars= dict(ids=ids, opcion=\'copyFile\', variables_extra=dict(origen=ruta_basica + orig_name,\n                                                                                             somelist=request.vars.hostname))))\n    return locals()\n\n@auth.requires_login()\ndef list_files():\n    folder_user = "uploads/" + str(auth.user_id) + "/"\n    ruta_basica = os.path.join(request.folder, folder_user)\n    lstDir = os.walk(ruta_basica)\n    #Lista vacia para incluir los ficheros\n    lstFiles = []\n    #Crea una lista de los ficheros jpg que existen en el directorio y los incluye a la lista.\n    for root, dirs, files in lstDir:\n        for fichero in files:\n            (nombreFichero, extension) = os.path.splitext(fichero)\n            lstFiles.append(nombreFichero+extension)\n\n    #res = response.stream(open(pathfilename,\'rb\'), chunk_size=10**6)\n\n    return locals()\n\n\n\n\n\n\n@auth.requires_login()\n## Reference http://www.web2py.com/AlterEgo/default/show/36\ndef my_big_file_downloader():\n    import os\n    filename=request.args[0]\n    folder_user = str(auth.user_id)\n    pathfilename= os.path.join(request.folder,\'uploads/\'+folder_user, filename)\n    return response.stream(open(pathfilename,\'rb\'), chunk_size=10**6)\n\n    # the old way\n# reference http://www.web2py.com/AlterEgo/default/show/36\n@auth.requires_login()\ndef my_small_file_downloader():\n    import os\n    import gluon.contenttype\n    filename=request.args[0]\n    folder_user = str(auth.user_id)\n    response.headers[\'Content-Type\']=gluon.contenttype.contenttype(filename)\n    pathfilename=os.path.join(request.folder,\'uploads/\'+folder_user, filename)\n    return open(\'pathfilename\', \'rb\').read()\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\nresponse._vars=response._caller(copiar_archivos)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/camilo/Escritorio/nuevo_nuevo_repo_git/proyecto_mv/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/camilo/Escritorio/nuevo_nuevo_repo_git/proyecto_mv/applications/datos/controllers/files.py", line 134, in <module>\n  File "/home/camilo/Escritorio/nuevo_nuevo_repo_git/proyecto_mv/gluon/globals.py", line 415, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/camilo/Escritorio/nuevo_nuevo_repo_git/proyecto_mv/gluon/tools.py", line 4231, in f\n    return action(*a, **b)\n  File "/home/camilo/Escritorio/nuevo_nuevo_repo_git/proyecto_mv/applications/datos/controllers/files.py", line 46, in copiar_archivos\n    orig_name = request.vars.archivo.filename\nAttributeError: \'str\' object has no attribute \'filename\'\n'
p11
s.