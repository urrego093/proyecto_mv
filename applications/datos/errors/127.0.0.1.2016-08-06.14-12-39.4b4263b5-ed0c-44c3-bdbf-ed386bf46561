(dp1
S'output'
p2
S"<type 'exceptions.NameError'> global name 'sistema_operativo' is not defined"
p3
sS'layer'
p4
S'/home/camilo/Escritorio/nuevo_nuevo_repo_git/proyecto_mv/applications/datos/controllers/system.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# intente algo como\nimport evaluar_expresion\n\n\ndef index(): return dict(message="hello from system.py")\n\n@auth.requires_login()\ndef reiniciar():\n    ids = request.vars["ids"]\n    form = FORM(_method=\'post\').confirm(T(\'Restart\'),{T(\'Back\'):URL(\'mostrar#\')})\n    form["_align"] = "center"\n    \n    pregunta = T(\'Do you really whish to restart the selected machines?\')\n    \n    if form.accepted:\n        redirect(URL(\'maquinas\', \'ejecutar\', vars= dict(ids=ids, opcion=\'restart\')))\n        #print tarea\n    return locals()\n\n@auth.requires_login()\ndef install_packages():\n    ids = request.vars["ids"]\n    accion = "install_packages"\n    form = SQLFORM.factory(  Field(\'paquetes\', label=\'Packages\', requires=IS_NOT_EMPTY()) ).process()\n    form[\'_align\'] = "center"\n    if form.accepted:\n        paquetes = request.vars.paquetes\n        paquetes = evaluar_expresion.evaluar(paquetes)\n        #servicio = \'yes\' if request.vars.servicio else \'no\'\n\n        variables_extra = dict( remote=\'all\', paquetes=paquetes, accion=accion)\n                               #, admin=admin)\n        #redirect(URL(\'mostrar\'))\n        redirect(URL(\'maquinas\', \'ejecutar\', vars= dict(ids=ids, opcion=\'paquete\', variables_extra = variables_extra))) ## asi se pasan las variables ingresadas por el usuario\n                       \n    return dict(form=form)\n\n@auth.requires_login()\ndef remove_packages():\n    ids = request.vars["ids"]\n    accion = "remove_packages"\n    form = SQLFORM.factory(  Field(\'paquetes\', label=\'Packages\', requires=IS_NOT_EMPTY())).process()\n    if form.accepted:\n        paquetes = request.vars.paquetes\n        paquetes = evaluar_expresion.evaluar(paquetes)\n        #servicio = \'yes\' if request.vars.servicio else \'no\'\n\n        variables_extra = dict( remote=\'all\', paquetes=paquetes, accion=accion)\n                               #, admin=admin)\n        #redirect(URL(\'mostrar\'))\n        redirect(URL(\'maquinas\', \'ejecutar\', vars= dict(ids=ids, opcion=\'paquete\', variables_extra = variables_extra))) ## asi se pasan las variables ingresadas por el usuario\n    return locals()\n\n@auth.requires_login()\ndef add_repositories():\n    ids = request.vars["ids"]\n    accion = "add_repo"\n    form = SQLFORM.factory(  Field(\'repositorios\', label=\'Repositories\', requires=IS_NOT_EMPTY())).process()\n    if form.accepted:\n        repositorios = request.vars.repositorios\n        repositorios = evaluar_expresion.evaluar(repositorios)\n        #servicio = \'yes\' if request.vars.servicio else \'no\'\n\n        variables_extra = dict( remote=\'all\', repositorios=repositorios, accion=accion)\n                               #, admin=admin)\n        #redirect(URL(\'mostrar\'))\n        redirect(URL(\'maquinas\', \'ejecutar\', vars= dict(ids=ids, opcion=\'paquete\', variables_extra = variables_extra))) ## asi se pasan las variables ingresadas por el usuario           \n    return locals()\n\n@auth.requires_login()\ndef remove_repositories():\n    ids = request.vars["ids"]\n    accion = "remove_repo"\n    form = SQLFORM.factory(  Field(\'repositorios\', label=\'Repositories\', requires=IS_NOT_EMPTY())).process()\n    if form.accepted:\n        repositorios = request.vars.repositorios\n        repositorios = evaluar_expresion.evaluar(repositorios)\n        #servicio = \'yes\' if request.vars.servicio else \'no\'\n\n        variables_extra = dict( remote=\'all\', repositorios=repositorios, accion=accion)\n                               #, admin=admin)\n        #redirect(URL(\'mostrar\'))\n        redirect(URL(\'maquinas\', \'ejecutar\', vars= dict(ids=ids, opcion=\'paquete\', variables_extra = variables_extra))) ## asi se pasan las variables ingresadas por el usuario                       \n    return locals()\n\n@auth.requires_login()\ndef services():\n    ids = request.vars["ids"]\n    variables_extra = dict( remote=\'all\', action=\'check\')\n    \n    redirect(URL(\'maquinas\', \'ejecutar\', vars= dict(ids=ids, opcion=\'services\', variables_extra = variables_extra, is_debug=True)))\n    return dict()\n\n@auth.requires_login()\ndef start_services():\n    services = []\n    ids = request.vars["ids"]\n    form = SQLFORM.factory(\n        Field(\'services\', label=\'Services\', requires=IS_NOT_EMPTY()),\n    ).process()\n\n    if form.accepted:\n        services = request.vars.services\n        services = evaluar_expresion.evaluar(services)\n    \n        variables_extra = dict( remote=\'all\', action=\'start\', services=services)\n    \n        redirect(URL(\'maquinas\', \'ejecutar\', vars= dict(ids=ids, opcion=\'services\', variables_extra = variables_extra)))\n    return locals()\n\n\n@auth.requires_login()\ndef stop_services():\n    ids = request.vars["ids"]\n    form = SQLFORM.factory(\n        Field(\'services\', label=\'Services\', requires=IS_NOT_EMPTY()),\n    ).process()\n\n    if form.accepted:\n        services = request.vars.services\n        services = evaluar_expresion.evaluar(services)\n    \n        variables_extra = dict( remote=\'all\', action=\'stop\', services=services)\n    \n        redirect(URL(\'maquinas\', \'ejecutar\', vars= dict(ids=ids, opcion=\'services\', variables_extra = variables_extra)))\n    return locals()\n\n\n@auth.requires_login()\ndef restart_services():\n    ids = request.vars["ids"]\n    form = SQLFORM.factory(\n        Field(\'services\', label=\'Services\', requires=IS_NOT_EMPTY()),\n    ).process()\n\n    if form.accepted:\n        services = request.vars.services\n        services = evaluar_expresion.evaluar(services)\n    \n        variables_extra = dict( remote=\'all\', action=\'restart\', services=services)\n    \n        redirect(URL(\'maquinas\', \'ejecutar\', vars= dict(ids=ids, opcion=\'services\', variables_extra = variables_extra)))\n    return locals()\n\n@auth.requires_login()\ndef reload_services():\n    ids = request.vars["ids"]\n    form = SQLFORM.factory(\n        Field(\'services\', label=\'Services\', requires=IS_NOT_EMPTY()),\n    ).process()\n\n    if form.accepted:\n        services = request.vars.services\n        services = evaluar_expresion.evaluar(services)\n    \n        variables_extra = dict( remote=\'all\', action=\'reload\', services=services)\n    \n        redirect(URL(\'maquinas\', \'ejecutar\', vars= dict(ids=ids, opcion=\'services\', variables_extra = variables_extra)))\n    return locals()\n\n@auth.requires_login()\ndef ports():\n    ids = request.vars["ids"]\n    variables_extra = dict( remote=\'all\', action=\'check\')\n    \n    redirect(URL(\'maquinas\', \'ejecutar\', vars= dict(ids=ids, opcion=\'ports\', variables_extra = variables_extra, is_debug=True)))\n    return dict()\n\n@auth.requires_login()\ndef enable_vnc():\n    id_maquina = request.vars["ids"]\n    puertos = db1(db1.port_machine.ip_machine == id_maquina).select(db1.port_machine.number_port, db1.port_machine.hostname)\n    print " ---- -- - - -LOS PUERTOS DE LA MAQUINA SON  - - - - -- - - - - - - -- -"\n    #print puertos\n    datos = []\n    for linea in puertos:\n        puerto = -1\n        usuario = "default_user"\n        for llave in linea:\n            if llave == "number_port":\n                puerto = int(linea[llave]) - 5900\n            elif llave == "hostname":\n                usuario = linea[llave]\n        datos.append(dict(name = usuario, vnc_num = puerto, vnc_port = puerto+5900)) \n    variables = dict(vnc_users = datos)\n    \n    redirect(URL(\'maquinas\', \'ejecutar\', vars= dict(ids=id_maquina, opcion=\'vnc_config\', variables_extra = variables)))\n    return locals()\n    \n@auth.requires_login()\ndef first_time():\n    ids = request.vars["ids"]\n    \n    campo = db1(db1.machine.id == ids).select()\n\n    ip = campo[0]["ip_machine"]\n    os = campo[0]["operative_system"]\n    \n    variables_extra = dict(IP = ip, OS = sistema_operativo)\n        \n    #redirect(URL(\'maquinas\', \'ejecutar\', vars= dict(ids=ids, opcion=\'first_time\', variables_extra=variables_extra))) \n\n        \n    #redirect(URL(\'maquinas\', \'ejecutar\', vars= dict(ids=ids, opcion=\'vnc_install\')))\n    return locals()\n\n@auth.requires_login()\ndef update_packges():\n    minutos = ["*"]\n    minutos += range(0,60)\n    \n    horas = ["*"]\n    horas += range(0,24)\n    \n    dias = ["*"]\n    dias += range(0,32)\n    \n    nombre_dias = ["*"]\n    nombre_dias += [\'sun\',\'mon\',\'tue\',\'wed\',\'thu\',\'fri\',\'sat\']\n    \n    nombre_mes = ["*"]\n    nombre_mes += [\'jan\',\'feb\',\'mar\',\'apr\',\'may\',\'jun\',\'jul\',\'aug\',\'sep\',\'oct\',\'nov\',\'dec\']\n    \n    #Recuperamos los ids\n    ids = request.vars["ids"]\n    \n    #Se crea el formulario\n    form = SQLFORM.factory(\n        Field(\'minute\', label=T(\'Minute\'), requires=IS_IN_SET(minutos, zero=\'Select one\', error_message=T(\'Too small or too big!\'))),\n        Field(\'hour\', label=T(\'Hour\'), requires=IS_IN_SET(horas, zero=\'Select one\',error_message=T(\'Too small or too big!\'))),\n        Field(\'day\', label=T(\'Day of Month\'),requires=IS_IN_SET(dias, zero=\'Select one\',error_message=T(\'Too small or too big!\'))),\n        Field(\'month\', requires=IS_IN_SET(nombre_mes,zero=\'Select one\' ,error_message=T(\'\xc2\xa1Error!\'))),\n        Field(\'weekday\', label=T(\'Weekday\'), requires=IS_IN_SET(nombre_dias, zero=\'Select one\', error_message=T(\'error\')))\n    )\n    form.add_button(T(\'Back\'), URL(\'maquinas\',\'mostrar#\'))\n    \n    if form.process().accepted:\n        response.flash = T(\'Form accepted\')\n        redirect(URL(\'maquinas\',\'ejecutar\', vars= dict(ids=ids, opcion=\'crontab\', \n            variables_extra=dict(minute=request.vars.minute, hour = request.vars.hour, day = request.vars.day,\n                month = request.vars.month, weekday = request.vars.weekday, accion = "update_packges"\n            )))\n        )\n\n    elif form.errors:\n        response.flash = T(\'Form contains errors\')\n\n    return locals()\n\n\n@auth.requires_login()\ndef delete_task():   \n    #Recuperamos los ids\n    ids = request.vars["ids"]\n    \n    #Creamos el formulario\n    form = SQLFORM.factory(\n        Field(\'name\', label=T(\'Name\'), requires=IS_NOT_EMPTY()),\n    ) \n    form.add_button(T(\'Back\'), URL(\'maquinas\',\'mostrar#\'))\n    \n    if form.process().accepted:\n        response.flash = T(\'Form accepted\')\n        redirect(URL(\'maquinas\',\'ejecutar\', \n            vars= dict(ids=ids, opcion=\'crontab\', variables_extra = dict( accion = "delete_task",nombre = request.vars.name) ))\n        )\n\n    elif form.errors:\n        response.flash = T(\'Form contains errors\')\n\n    return locals()\n\nresponse._vars=response._caller(first_time)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/camilo/Escritorio/nuevo_nuevo_repo_git/proyecto_mv/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/camilo/Escritorio/nuevo_nuevo_repo_git/proyecto_mv/applications/datos/controllers/system.py", line 274, in <module>\n  File "/home/camilo/Escritorio/nuevo_nuevo_repo_git/proyecto_mv/gluon/globals.py", line 415, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/camilo/Escritorio/nuevo_nuevo_repo_git/proyecto_mv/gluon/tools.py", line 4231, in f\n    return action(*a, **b)\n  File "/home/camilo/Escritorio/nuevo_nuevo_repo_git/proyecto_mv/applications/datos/controllers/system.py", line 200, in first_time\n    variables_extra = dict(IP = ip, OS = sistema_operativo)\nNameError: global name \'sistema_operativo\' is not defined\n'
p11
s.