(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> 'module' object is not callable"
p3
sS'layer'
p4
S'/home/camilo/Escritorio/repo_git/proyecto_mv/applications/datos/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\nimport evaluar_expresion\n\ndef index():\n    a = \'usuarioas2, usuario 15-18\'\n    b = evaluar_expresion(a)\n    response.flash = T(b)\n    #response.flash = T("Hello People UD")\n    \'\'\'\n    tarea = scheduler.queue_task(\n    "demo1",    \n    pargs=[1,2,3,4],\n    pvars={\'a\':\'foo\'},\n    #start_time= \'now\', \t\t#datetime\n    #stop_time = None,\t\t#datetime\n    #timeout = 60,               #seconds\n    #prevent_drift=False,\n    #period=60,                  #seconds\n    #immediate=False,\n    repeats = 1\n    )\n    \'\'\'\n    return locals();\n\n@auth.requires_membership(\'admin\')\ndef register_course():\n    form = SQLFORM(db1.course).process()\n    if form.accepted:\n        session.flash = T("Course Create!")\n        redirect(URL(\'index\'))\n    return locals()\n\n@auth.requires_login()\n@auth.requires_membership(\'admin\')\ndef agree_teacher():\n    rows = db1(db1.auth_user.registration_key==\'pending\').select()\n    return locals()\n\n\ndef show_teacher():\n    user = db1.auth_user(request.args(0, cast=int))\n    user.update(registration_key=\'\')\n    db1.auth_user.first_name.writable = False\n    db1.auth_user.first_name.reable = False\n    db1.auth_user.last_name.writable = False\n    db1.auth_user.last_name.reable = False\n    form = SQLFORM(db1.auth_user, user, deletable=True, showid=False)\n\n    if form.process(next=URL(\'update_group_teacher\', args=user.id)).accepted:        \n        response.flash = T (\'Teacher accepted\')        \n    elif form.errors:\n        response.flash = T (\'Teacher No Update\')\n    \n\n    \n    return locals()\n\ndef update_group_teacher():\n    member = db1.auth_membership(request.args(0, cast=int) or redirect(URL(\'index\')))\n    if member:\n        member.update(group_id=2)\n        db1.auth_membership.user_id.writable = False\n        db1.auth_membership.user_id.reable = False\n        db1.auth_membership.group_id.writable = False\n        db1.auth_membership.group_id.reable = False    \n        form = SQLFORM(db1.auth_membership, member, showid=False)\n\n        if form.process().accepted:        \n            response.flash = T (\'User Agree to Teacher Group\')        \n        elif form.errors:\n            response.flash = T (\'Group No Update\')\n    else:\n        redirect(URL(\'index\'))\n    return locals()\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\nresponse._vars=response._caller(index)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/camilo/Escritorio/repo_git/proyecto_mv/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/camilo/Escritorio/repo_git/proyecto_mv/applications/datos/controllers/default.py", line 121, in <module>\n  File "/home/camilo/Escritorio/repo_git/proyecto_mv/gluon/globals.py", line 415, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/camilo/Escritorio/repo_git/proyecto_mv/applications/datos/controllers/default.py", line 14, in index\n    b = evaluar_expresion(a)\nTypeError: \'module\' object is not callable\n'
p11
s.