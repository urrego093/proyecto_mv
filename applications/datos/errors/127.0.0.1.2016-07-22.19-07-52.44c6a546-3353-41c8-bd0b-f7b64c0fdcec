(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> malformed string"
p3
sS'layer'
p4
S'/home/camilo/Escritorio/nuevo_nuevo_repo_git/proyecto_mv/applications/datos/controllers/maquinas.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# intente algo como\nimport os\nimport ast\n\n\'\'\'\ndef index():\n    cabezas = ["ip_machine", "code_course", "operative_system", "memory", "processor"]\n    filas =  db1((db1.machine.ip_machine)).select(\n        db1.machine.ip_machine, db1.machine.code_course, db1.machine.operative_system,db1.machine.memory,db1.machine.processor\n    )\n    acciones = [T("Restart"),T("Add user")]\n    return locals()\n\'\'\'\n@auth.requires_login()\ndef mostrar():\n    macxuser = []\n    for c_group in db1(db1.course_group.id_teacher==auth.user_id).select(db1.course_group.cod_course, distinct=True):\n        for row in db1(db1.machine.code_course==c_group.cod_course.id).select(db1.machine.ip_machine, db1.machine.id, distinct=True):\n            macxuser.append(row.id) #/id_machine/id_course\n    adminis = db1((db1.auth_membership.user_id == auth.user_id)).select()\n    for row in adminis:\n        if row.group_id.role =="Administrador":\n            db_machine = db1.machine\n        elif row.group_id.role=="Docente":\n            db_machine = db1(db1.machine.id.belongs(macxuser)) #http://web2py.com/books/default/chapter/29/6#belongs\n\n\n    campos_maquina = [db1.machine.ip_machine, db1.machine.operative_system, db1.machine.memory, db1.machine.processor, db1.machine.description_machine]\n    grid = SQLFORM.grid(db_machine, fields = campos_maquina ,csv=False, editable=False, deletable=False, create=False, details=False,\n        searchable=False, # Quitar comentario si se quiere ocultar la barra de busqueda\n                           #se tiene q revisar el por que al ver un registro la linea x = grid[1][0].process() genera error si \n        selectable = lambda ids :\n                        redirect(     URL(  \'maquinas\', \'configurar\', vars=dict(ids=ids)    )  )\n    )\n    #grid[1][0].insert(1, test)\n    grid[1][\'_align\'] = "center" # jejeje\n\n    #GRACIAS!!!!   https://groups.google.com/forum/#!topic/web2py/3kSpuDgo1Lw\n    #Si no hay maquinas se muere, ya q grid[1][0] queda siendo un div y no es posible llamar process(), corregir~! \n    #print "   ------------------ ///// --------------- " ,grid[1][0]\n    \n    x = grid[1][0].process()\n    \n    x["_method"] =\'post\'\n    if x.accepted:\n        if x.vars.records:\n            accion = request.vars.accion\n#### General\n            if accion == T("reboot"):\n                redirect (URL(\'system\', \'reiniciar\', vars=dict(ids= x.vars.records)))\n            \n#### Users and passwords                \n            elif accion == T("create_users"):\n                redirect(URL(\'usuarios\', \'crear\' ,vars=dict(ids= x.vars.records)))\n                \n            elif accion == T("delete_users"):\n                redirect(URL(\'usuarios\',\'eliminar_usuario\',vars=dict(ids= x.vars.records)))\n                \n            elif accion == T(\'change_users_pass\'):\n                redirect(URL(\'usuarios\',\'cambiar_pass\',vars=dict(ids= x.vars.records)))\n\n#### Files                \n            elif accion == T("copy_files"):\n                ids= x.vars.records\n                if type(ids) == str:  \n                    redirect(URL(\'copiar_archivos\',vars=dict(ids = ids)))\n                else:\n                    response.flash = T("For this task, please select just one machine")\n                \n            elif accion == T("re_copy_files"):\n                ids= x.vars.records\n                if type(ids) == str:  \n                    redirect(URL(\'copiar_archivos_subidos\',vars=dict(ids= ids, archi = request.vars.archi), ))\n                else:\n                    response.flash = T("For this task, please select just one machine")\n                    \n            elif accion == T("limpiar"):\n                redirect(URL(\'files\',\'clean_machines\',vars=dict(ids= x.vars.records)))\n                \n#### Packages and repositories\n            elif accion == T("install_package"):\n                redirect(URL(\'system\', \'install_packages\', vars=dict(ids= x.vars.records)))\n                \n            elif accion == T("remove_packages"):\n                redirect(URL(\'system\', \'remove_packages\', vars=dict(ids= x.vars.records)))\n                \n            elif accion == T("add_repo"):\n                redirect(URL(\'system\', \'add_repositories\', vars=dict(ids= x.vars.records)))\n                \n            elif accion == T("remove_repo"):\n                redirect(URL(\'system\', \'remove_repositories\', vars=dict(ids= x.vars.records)))\n\n#### Servicios\n            elif accion == T("services"):\n                redirect(URL(\'system\', \'services\', vars=dict(ids= x.vars.records)))\n            \n            elif accion == T("start_services"):\n                redirect(URL(\'system\', \'start_services\', vars=dict(ids= x.vars.records)))\n                \n            elif accion == T("stop_services"):\n                redirect(URL(\'system\', \'stop_services\', vars=dict(ids= x.vars.records)))\n                \n            elif accion == T("restart_services"):\n                redirect(URL(\'system\', \'restart_services\', vars=dict(ids= x.vars.records)))\n                \n            elif accion == T("reload_services"):\n                redirect(URL(\'system\', \'reload_services\', vars=dict(ids= x.vars.records)))\n\n#### Ports\n            elif accion == T(\'ports\'):\n                redirect(URL(\'system\', \'ports\', vars=dict(ids= x.vars.records)))\n            \n#### Cron tasks\n            elif accion == T("tasks_cron"):\n                redirect(URL(\'system\',\'tasks_cron\', vars=dict(ids= x.vars.records)))\n### VNC\n            ## La instalacion del paquete VNC se hace automaticamente al crear una maquina por lo tanto dicha opcion no se muestra\n    \n            elif accion == T(\'enable_vnc_ports\'):\n                ids= x.vars.records\n                if type(ids) == str:  \n                    redirect(URL(\'maquinas\', \'enable_vnc\', vars=dict(ids= x.vars.records)))\n                else:\n                    response.flash = T("For this task, please select just one machine")\n\n            else:\n                pass\n        else:\n            response.flash = T(\'Please select at least one machine\')\n            #redirect ( URL(  \'maquinas\', \'configurar\', vars=dict(accion=x.vars.accion, id= x.vars.records) ))\n    #elif x.errors:\n        #response.flash = T(\'Please select at leats one id\')\n     \n    return locals()\n\n@auth.requires_login()\ndef enable_vnc():\n    id_maquina = request.vars["ids"]\n    puertos = db1(db1.port_machine.ip_machine == id_maquina).select(db1.port_machine.number_port, db1.port_machine.hostname)\n    print " ---- -- - - -LOS PUERTOS DE LA MAQUINA SON  - - - - -- - - - - - - -- -"\n    #print puertos\n    datos = []\n    for linea in puertos:\n        puerto = -1\n        usuario = "default_user"\n        for llave in linea:\n            if llave == "number_port":\n                puerto = int(linea[llave]) - 5900\n            elif llave == "hostname":\n                usuario = linea[llave]\n        #print usuario, puerto\n        datos.append(dict(name = usuario, vnc_num = puerto, vnc_port = puerto+5900)) \n    #print datos\n    variables = dict(vnc_users = datos)\n    #print variables\n    ruta = "/home/camilo/Escritorio/ejemplo/salida.yml"\n\n    ruta = escribir_variables_yml(ruta, variables)\n    return locals()\n    \n\n@auth.requires_login()\ndef copiar_archivos():\n    #Recuperamos los ids\n    ids = request.vars["ids"]\n    #recuperamos el path para subir los archivos\n    folder_user = "uploads/" + str(auth.user_id) + "/"\n    ruta_basica = os.path.join(request.folder, folder_user)\n    rows = db1(db1.port_machine.ip_machine==ids).select()\n    for row in rows:\n        HOSTNAME.append(row.hostname);\n    #url = URL(\'download\')\n    # https://groups.google.com/forum/#!topic/web2py/X5xmXyTCavY Checkbox Multiple\n    form = SQLFORM.factory(  Field("archivo", "upload", uploadfolder=ruta_basica, autodelete=True), #widget=SQLFORM.widgets.upload.widget),\n        Field("hostname", "list:string",\n              default=HOSTNAME,widget=SQLFORM.widgets.checkboxes.widget,\n              requires=[IS_IN_SET(HOSTNAME,multiple=True),IS_NOT_EMPTY()]))\n    form.add_button(T(\'Back\'), URL(\'mostrar#\'))\n\n    #var_extra = dict(origen=request.vars.archivo, somelist=request.vars.hostname)\n    var_extra = ""#"origen=" +str("") + "somelist=" + str(request.vars.hostname)\n\n    #print "\\n\\n ********************************** \\n\\n"\n    if form.accepts(request.vars, session):\n        #http://stackoverflow.com/questions/8008213/web2py-upload-with-original-filename todo un d\xc3\xada intentado hacer lo que este chico me soluciono :D\n        coded_name = form.vars.archivo\n        orig_name = request.vars.archivo.filename\n        os.rename(ruta_basica + coded_name, ruta_basica + orig_name)\n        redirect(URL(\'ejecutar\', vars= dict(ids=ids, opcion=\'copyFile\', variables_extra=dict(origen=ruta_basica + orig_name,\n                                                                                             somelist=request.vars.hostname))))\n    return locals()\n\n\n\n@auth.requires_login()\ndef copiar_archivos_subidos():\n    #Recuperamos los ids\n    ids = request.vars["ids"]\n    #recuperamos el path para subir los archivos\n    folder_user = "uploads/" + str(auth.user_id) + "/"\n    ruta_basica = os.path.join(request.folder, folder_user)\n    orig_name =  request.vars.archi\n    rows = db1(db1.port_machine.ip_machine==ids).select()\n    for row in rows:\n        HOSTNAME.append(row.hostname);\n    #url = URL(\'download\')\n    # https://groups.google.com/forum/#!topic/web2py/X5xmXyTCavY Checkbox Multiple\n    form = SQLFORM.factory(  Field("archivo", "string", default = orig_name, writable= False), #widget=SQLFORM.widgets.upload.widget),\n        Field("hostname", "list:string",\n              default=HOSTNAME,widget=SQLFORM.widgets.checkboxes.widget,\n              requires=[IS_IN_SET(HOSTNAME,multiple=True),IS_NOT_EMPTY()]))\n    form.add_button(T(\'Back\'), URL(\'mostrar#\'))\n\n    if form.accepts(request.vars, session):\n        redirect(URL(\'ejecutar\', vars= dict(ids=ids, opcion=\'copyFile\', variables_extra=dict(origen=ruta_basica + orig_name,\n                                                                                             somelist=request.vars.hostname))))\n    return locals()\n\n@auth.requires_login()\n@auth.requires_membership(\'Administrador\')\ndef lista_maquina_grupo():\n    indentificador = auth.user_id\n\n    mensaje = H1 (T("Please select a course"))\n    restricciones = dict(\n        #course_group = db1.course_group.id_teacher== indentificador\n                         #, course = db1.course.id == 2\n                        )\n    grid = SQLFORM.smartgrid(db1.course,linked_tables=[\'course_group\'], constraints = restricciones,\n        #searchable=False,\n        deletable=False, editable=True, details=True, csv= False, create= False\n        #, links=[lambda row:A(T("Select"),_href=URL("maquinas","lista_maquina_clase",args=[row.id]))]\n    )\n    return locals()\n\n@auth.requires_login()\ndef ejecutar():\n    #un diccionario con los nombres de los playbooks segun la opcion elegida\n    playbooks= dict(restart=\'reiniciar.yml\', user=\'usuarios2/linux_users.yml\', copyFile=\'copiarArchivo.yml\', paquete="paquete/paquete.yml", \n                    services="services/services.yml", ports="ports/ports.yml", limpiar = "limpiar.yml", vnc_install = "vnc_install/vnc_install.yml")\n     \n    #los ids de las maquinas selccionadas y la opcion elegida\n    ids = request.vars["ids"]\n    ids = [ids] if type(ids)==str else ids\n    opcion = request.vars[\'opcion\']\n    \n    #para_evitar_errores ccon los playbook de servicios y puertos, que hacian un parseo para\n    # mostrar la salida de un comando incluso cuando este no era para revisar el estado actual\n    is_debug = True if request.vars["is_debug"] else False\n    \n    variables_extra = request.vars[\'variables_extra\']\n    #print str(ids)+ "opcion " + str(playbooks[opcion]) + str(variables_extra) \n    \n    #se crea el nombre de los archivos de la tarea con primerNombre_segundoNombre\n    indentificador = auth.user_id\n    #nombres = db1(db1.auth_user.id == indentificador).select(db1.auth_user.first_name,      db1.auth_user.last_name)\n\n    ruta_basica = os.path.join(request.folder, \'private/Ansible/\')\n\n    trabajos_usuario = db1(db1.job.user_id == auth.user_id).select()\n    total_trabajos = len(trabajos_usuario)\n\n\n    nombre = str(indentificador) + \'_\' + str(total_trabajos)\n\n    #se construye un diccionario para ejecutar el playbook\n    variables = dict(\n        nombre= ruta_basica + "resultados/" + nombre,\n        playbook=ruta_basica + "Playbooks/" +  playbooks[opcion],\n        hosts= ruta_basica + \'\' + nombre,\n        ruta_extra=ruta_basica + "variables/" + nombre,\n        debug = ruta_basica + "debug/" + nombre,\n        variables=variables_extra,\n        is_debug= is_debug\n    )\n    \n    #se pide al worker o proceso en segundo plano que ejcuta el playbook en maximo 10 minutos\n    tarea = scheduler.queue_task(\n        "playbook", pargs=ids, pvars=variables, stop_time = None, timeout = 120 ,repeats = 1\n    )\n    print "id ", str(tarea.id) #id de la tarea \n    #se inserta un registro de la tarea en la base de datos con la referencia al campo en la tabla scheduler_task,\n    #dicha tabla maneja los estados de una tarea, registra los errores, guarda los argumentos(parametros en un arreglo)\n    # y las variables(parametros en un diccionario)\n    db1.job.insert(name = nombre, user_id = indentificador, task_id = tarea.id, action = opcion)\n   \n    #db1.commit()\n    redirect(URL(\'tasks\', \'resumen/\'+nombre))\n\nresponse._vars=response._caller(enable_vnc)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/camilo/Escritorio/nuevo_nuevo_repo_git/proyecto_mv/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/camilo/Escritorio/nuevo_nuevo_repo_git/proyecto_mv/applications/datos/controllers/maquinas.py", line 291, in <module>\n  File "/home/camilo/Escritorio/nuevo_nuevo_repo_git/proyecto_mv/gluon/globals.py", line 415, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/camilo/Escritorio/nuevo_nuevo_repo_git/proyecto_mv/gluon/tools.py", line 4231, in f\n    return action(*a, **b)\n  File "/home/camilo/Escritorio/nuevo_nuevo_repo_git/proyecto_mv/applications/datos/controllers/maquinas.py", line 159, in enable_vnc\n    ruta = escribir_variables_yml(ruta, variables)\n  File "/home/camilo/Escritorio/nuevo_nuevo_repo_git/proyecto_mv/applications/datos/models/playbook_files.py", line 149, in escribir_variables_yml\n    diccionario = ast.literal_eval(variables)\n  File "/usr/lib/python2.7/ast.py", line 80, in literal_eval\n    return _convert(node_or_string)\n  File "/usr/lib/python2.7/ast.py", line 79, in _convert\n    raise ValueError(\'malformed string\')\nValueError: malformed string\n'
p11
s.