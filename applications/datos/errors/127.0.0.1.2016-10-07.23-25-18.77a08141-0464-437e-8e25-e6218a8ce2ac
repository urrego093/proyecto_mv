(dp1
S'output'
p2
S'<class \'psycopg2.ProgrammingError\'> relation "student_x_machine" does not exist\nLINE 1: ...code_student, student_x_machine.course_group FROM student_x_...\n                                                             ^\n'
p3
sS'layer'
p4
S'/home/camilo/Escritorio/nuevo_nuevo_repo_git/proyecto_mv/applications/datos/controllers/academia.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# intente algo como\n@auth.requires_login()\n@auth.requires_membership(\'Administrador\')\ndef register_course():\n    form = SQLFORM(db1.course).process()\n    if form.accepted:\n        session.flash = T("Course Created!")\n        redirect(URL(\'default\',\'index\'))\n    return locals()\n\n@auth.requires_login()\ndef create_hostvars_yml(idmachine, systemOpe):\n    datos = dict()\n    if systemOpe == "Ubuntu":\n        datos = dict(ansible_become_pass="reverse", ansible_user="ubuntu")\n        #datos = dict(ansible_become_pass="osboxes.org", ansible_user="osboxes")\n    elif systemOpe == "CentOS":\n        #datos = dict(ansible_become_pass="Centosbase123", ansible_user="root")\n        datos = dict(ansible_become_pass="reverse", ansible_user="root")  \n        #datos = dict(ansible_become_pass="osboxes.org", ansible_user="root")\n    elif systemOpe == "Fedora":\n        datos = dict(ansible_become_pass="Centosbase123", ansible_user="root")\n        #datos = dict(ansible_become_pass="osboxes.org", ansible_user="root")\n\n        \n    #datos = dict (ansible_become_pass="reverse", ansible_user="root")\n    \n    ruta_basica = os.path.join(request.folder, \'private/Ansible/host_vars/\')\n    file_path = ruta_basica + idmachine\n    escribir_host_yml(file_path,datos)\n        \n@auth.requires_login()\n@auth.requires_membership(\'Administrador\')\ndef register_machine():\n    form = SQLFORM(db1.machine).process()\n    if form.accepted:\n        \n        ip = str(form.vars.ip_machine)\n        sistema_operativo = str(form.vars.operative_system)\n        maquina_id = form.vars.id\n        \n        create_hostvars_yml(ip, sistema_operativo)\n        session.flash = T(" Machine Created!")\n\n        \'\'\'\n            Al crear una maquina en el sistema, de manera autom\xc3\xa1tica se instala la llave local en la maquina\n            para conectar por ssh sin contrase\xc3\xb1a y se instala el paqeuet vnc\n        \'\'\'\n        variables_extra = dict(IP = ip, OS = sistema_operativo)\n        \n        redirect(URL(\'maquinas\', \'ejecutar\', vars= dict(ids=maquina_id, opcion=\'first_time\', variables_extra=variables_extra))) \n\n        #redirect(URL(\'default\',\'index\'))\n    return locals()\n\n@auth.requires_membership(\'Administrador\')\ndef register_group():\n    form = SQLFORM(db1.course_group).process()\n    if form.accepted:\n        session.flash = T("Group Created!")\n        redirect(URL(\'default\',\'index\'))\n    return locals()\n\ndef del_copy(lista1):\n    if lista1==[]:\n        return lista1\n    else:\n        lista2 = []\n        for key in lista1:\n            if key not in lista2:\n                lista2.append(key)\n        return lista2\n\n@auth.requires_login()\ndef r_est():\n    semes = request.args(0)\n    course = db1.course(request.args(2, cast=int))\n    machine = db1.machine(request.args(1, cast=int) or redirect(URL(\'default\',\'index\')))\n    num_group = request.args(3) or redirect(URL(\'default\',\'index\'))\n    \n    port_m = db1(db1.port_machine.ip_machine==machine.id).select()\n    list_port_usados = []\n    list_all_port = []\n    print list_all_port\n\n    for row_mac in port_m:\n        list_all_port.append(row_mac.id)\n        for r_usados in db1((db1.student_x_machine.ip_machine==row_mac.id)).select():\n            if r_usados.semester==semes:\n                list_port_usados.append(r_usados.ip_machine)\n\n    list_port_usados = del_copy(list_port_usados)\n    for i in list_port_usados:\n        list_all_port.remove(i)\n\n    db_machine= db1(db1.port_machine.id.belongs(list_all_port))\n    campos = [db1.port_machine.id, db1.port_machine.ip_machine, db1.port_machine.number_port, db1.port_machine.hostname]\n\n    gs = SQLFORM.grid(db_machine, fields = campos,\n                          csv=False, editable=False, deletable=False, searchable=False,\n                          details=False,create=False, user_signature=False,\n                          links=[lambda row:A(T("Select"),_href=URL(\'regis_student\', args=(semes, machine.id, course.id, num_group, row.id)))],\n                          links_placement = \'left\'#,\n                          #selectable = lambda ids:redirect(URL(\'maquinas\', \'configurar\', vars=dict(ids=ids)))\n    )\n\n    return locals()\n\n\n@auth.requires_login()\ndef regis_student():\n    semes = request.args(0)\n    course = db1.course(request.args(2, cast=int))\n    machine = db1.machine(request.args(1, cast=int) or redirect(URL(\'default\',\'index\')))\n    num_group = request.args(3) or redirect(URL(\'default\',\'index\'))\n    id_port_mach = db1.port_machine(request.args(4) or redirect(URL(\'default\',\'index\')))\n    db1.student_x_machine.ip_machine.default = id_port_mach.id\n    db1.student_x_machine.ip_machine.writable = False\n    db1.student_x_machine.ip_machine.reable = False\n    db1.student_x_machine.semester.default = semes\n    db1.student_x_machine.semester.writable = False\n    db1.student_x_machine.semester.reable = False\n    db1.student_x_machine.course_group.default = num_group\n    db1.student_x_machine.course_group.writable = False\n    db1.student_x_machine.course_group.reable = False\n    form = SQLFORM(db1.student_x_machine).process()\n    if form.accepted:\n        response.flash = T("Student Registered")\n        redirect(URL(\'default\',\'index\'))\n    elif form.errors:\n        response.flash = \'form has errors\'\n    else:\n        response.flash = \'please fill the form\'\n    return locals()\n\n\n@auth.requires_login()\n@auth.requires_membership(\'Administrador\')\ndef agree_teacher():\n    rows = db1(db1.auth_user.registration_key==\'pending\').select()\n    return locals()\n\n@auth.requires_login()\ndef show_teacher():\n    user = db1.auth_user(request.args(0, cast=int))\n    user.update(registration_key=\'\')\n    db1.auth_user.first_name.writable = False\n    db1.auth_user.first_name.reable = False\n    db1.auth_user.last_name.writable = False\n    db1.auth_user.last_name.reable = False\n    form = SQLFORM(db1.auth_user, user, deletable=False, showid=False)\n    form.add_button(T(\'Back\'), URL(\'academia\',\'agree_teacher\') )\n\n    if form.process(next=URL(\'update_group_teacher\', args=user.id)).accepted:\n        #response.flash = T (\'Teacher accepted\')\n        pass\n    elif form.errors:\n        pass\n        #response.flash = T (\'Teacher No Update\')\n\n\n\n    return locals()\n\n@auth.requires_login()\ndef update_group_teacher():\n    member = db1.auth_membership(request.args(0, cast=int) or redirect(URL(\'index\')))\n    if member:\n        ruta_basica = os.path.join(request.folder, \'uploads/\')\n        ruta_basica = ruta_basica + str(member.user_id)\n        try:\n            os.makedirs(ruta_basica)\n        except OSError:\n            pass\n        # si no podemos crear la ruta dejamos que pase\n        # si la operaci\xc3\xb3n resulto con \xc3\xa9xito nos cambiamos al directorio\n        os.chdir(ruta_basica)\n        linea = db1(db1.auth_group.role == "Docente").select(db1.auth_group.id)\n\n        if linea:\n            member.update(group_id=linea[0]["id"])\n            session.flash = T(\'Teacher Accepted\')\n        else:\n            session.flash  = T("Couldn\'t add the teacher to the group")\n            \n    redirect(URL(\'academia\', \'agree_teacher\') )\n\n@auth.requires_login()\ndef deny_teacher():\n    user_id = request.args(0, cast=int)\n    user = db1.auth_user(user_id)\n    \n    #user_id = request.args(0, cast=int)\n    #user = db1(db1.auth_user.id == user_id)\n    #print user\n\n    db1.auth_user.first_name.writable = False\n    db1.auth_user.first_name.reable = False\n    db1.auth_user.last_name.writable = False\n    db1.auth_user.last_name.reable = False\n    \n    form = SQLFORM(db1.auth_user, user, deletable=False, showid=False)\n    form.add_button(T(\'Back\'), URL(\'academia\',\'agree_teacher\') )\n\n    if form.process().accepted:\n        db1(db1.auth_user.id == request.args(0, cast=int)).delete()\n        session.flash = T (\'User rejected\')\n        redirect(URL(\'academia\',\'agree_teacher\'))\n    elif form.errors:\n        session.flash = T (\'Error in the form\')\n\n\n    return locals()\n\n\n@auth.requires_login()\ndef mostrar_macxuser():\n    course = db1.course(request.args(1, cast=int) or redirect(URL(\'index\')))\n    machine = db1.machine(request.args(0, cast=int) or redirect(URL(\'index\')))\n    #c_group = db1((db1.course_group.cod_course==course.id)& (db1.course_group.id_teacher==auth.user_id)).select()\n\n    groups_text = T("Groups of ")\n    query_grupos = ((db1.course_group.cod_course==course.id)& (db1.course_group.id_teacher==auth.user_id)) # eliminar la segunda condicion para q muestre todos los grupos de la materia\n    campos_grupo = [db1.course_group.cod_group, db1.course_group.semester]\n    groups = SQLFORM.grid(query_grupos, fields = campos_grupo,\n                          csv=False, editable=False, deletable=False, searchable=False,\n                          details=False,create=False, user_signature=False,\n                          links=[lambda row:A(T("Select"),_href=URL(\'show_ports\', args=(row.semester, machine.id, course.id, row.cod_group)))],\n                          links_placement = \'left\'\n    )\n    return locals()\n\n@auth.requires_login()\n@auth.requires_membership(\'Docente\')\ndef show_couxuser():\n    course = db1.course(request.args(0, cast=int) or redirect(URL(\'default\',\'index\')))\n    #c_machine= db1((db1.machine.code_course==course.id)).select()\n\n\n    query_maquinas = db1.machine.code_course==course.id\n    campos_maquina = [db1.machine.ip_machine, db1.machine.operative_system, db1.machine.memory, db1.machine.processor]\n    maquinas = SQLFORM.grid(query_maquinas, fields = campos_maquina, csv=False, editable=False, deletable=False,\n        searchable=False, # No no moverlo, la busqueda no va a servir debido a q user_signature esta desativado\n        details=False, create=False,\n        user_signature=False # Si se deja activada como es por defecto resulta en un error extrano, solo en este formulario\n        ,links=[lambda row:A(T("Select"),_href=URL(\'mostrar_macxuser\',args=(row.id, course.id)))],\n        links_placement = \'left\'\n    )\n\n    #groups_text = T("Groups of ")\n    #query_grupos = db1.course_group.cod_course==course.id and db1.course_group.id_teacher == auth.user_id # eliminar la segunda condicion para q muestre todos los grupos de la materia\n    #campos_grupo = [db1.course_group.cod_group, db1.course_group.semester]\n    #groups = SQLFORM.grid(query_grupos, fields = campos_grupo ,\n     #   csv=False, editable=False, deletable=False, searchable=False, details=False,\n      #  create=False, user_signature=False\n    #)\n    return locals()\n\n@auth.requires_login()\ndef show_ports():\n    semes = request.args(0)\n    course = db1.course(request.args(2, cast=int) or redirect(URL(\'default\',\'index\')))\n    machine = db1.machine(request.args(1, cast=int) or redirect(URL(\'default\',\'index\')))\n    num_group = request.args(3) or redirect(URL(\'default\',\'index\'))\n    port_mac = db1(db1.port_machine.ip_machine==machine.id).select()\n    response.flash = num_group\n    list_port = []\n\n    for port_m in port_mac:\n        list_est = db1((db1.student_x_machine.ip_machine==port_m.id) &\n                       (db1.student_x_machine.semester==semes) & (db1.student_x_machine.course_group==num_group)).select( db1.student_x_machine.name_student, db1.student_x_machine.code_student, db1.student_x_machine.course_group)\n        for l_est in list_est:\n            list_port.append((port_m.number_port, port_m.hostname, l_est.code_student, l_est.name_student, l_est.course_group))\n    if not list_port:\n        response.flash = T ("Currently there are no students")\n\n    return locals()\n\n\n\n\n#def register_student():\n#    form = SQLFORM(db1.student_x_machine).process()\n#    if form.accepted:\n#        session.flash = T("Student Register")\n#        #redirect(URL(\'index\'))\n#    return locals()\n\nresponse._vars=response._caller(show_ports)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/camilo/Escritorio/nuevo_nuevo_repo_git/proyecto_mv/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/camilo/Escritorio/nuevo_nuevo_repo_git/proyecto_mv/applications/datos/controllers/academia.py", line 290, in <module>\n  File "/home/camilo/Escritorio/nuevo_nuevo_repo_git/proyecto_mv/gluon/globals.py", line 415, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/camilo/Escritorio/nuevo_nuevo_repo_git/proyecto_mv/gluon/tools.py", line 4231, in f\n    return action(*a, **b)\n  File "/home/camilo/Escritorio/nuevo_nuevo_repo_git/proyecto_mv/applications/datos/controllers/academia.py", line 272, in show_ports\n    (db1.student_x_machine.semester==semes) & (db1.student_x_machine.course_group==num_group)).select( db1.student_x_machine.name_student, db1.student_x_machine.code_student, db1.student_x_machine.course_group)\n  File "/home/camilo/Escritorio/nuevo_nuevo_repo_git/proyecto_mv/gluon/packages/dal/pydal/objects.py", line 2020, in select\n    return adapter.select(self.query, fields, attributes)\n  File "/home/camilo/Escritorio/nuevo_nuevo_repo_git/proyecto_mv/gluon/packages/dal/pydal/adapters/base.py", line 1296, in select\n    return self._select_aux(sql,fields,attributes)\n  File "/home/camilo/Escritorio/nuevo_nuevo_repo_git/proyecto_mv/gluon/packages/dal/pydal/adapters/base.py", line 1253, in _select_aux\n    self.execute(sql)\n  File "/home/camilo/Escritorio/nuevo_nuevo_repo_git/proyecto_mv/gluon/packages/dal/pydal/adapters/postgres.py", line 362, in execute\n    return BaseAdapter.execute(self, *a, **b)\n  File "/home/camilo/Escritorio/nuevo_nuevo_repo_git/proyecto_mv/gluon/packages/dal/pydal/adapters/base.py", line 1388, in execute\n    return self.log_execute(*a, **b)\n  File "/home/camilo/Escritorio/nuevo_nuevo_repo_git/proyecto_mv/gluon/packages/dal/pydal/adapters/base.py", line 1382, in log_execute\n    ret = self.get_cursor().execute(command, *a[1:], **b)\nProgrammingError: relation "student_x_machine" does not exist\nLINE 1: ...code_student, student_x_machine.course_group FROM student_x_...\n                                                             ^\n\n'
p11
s.