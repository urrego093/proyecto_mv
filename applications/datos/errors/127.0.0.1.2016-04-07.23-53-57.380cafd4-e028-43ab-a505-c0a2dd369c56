(dp1
S'output'
p2
S'<type \'exceptions.SyntaxError\'> Field: invalid field name: New user name, use rname for "funny" names'
p3
sS'layer'
p4
S'/home/camilo/Escritorio/repo_git/web2py/applications/datos/controllers/maquinas.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# intente algo como\nimport os\nimport playbook\nimport escribir_variables\n\n\'\'\'\ndef index():\n    cabezas = ["ip_machine", "code_course", "operative_system", "memory", "processor"]\n    filas =  db1((db1.machine.ip_machine)).select(\n        db1.machine.ip_machine, db1.machine.code_course, db1.machine.operative_system,db1.machine.memory,db1.machine.processor\n    )\n    acciones = [T("Restart"),T("Add user")]\n    return locals()\n\'\'\'\n    \ndef mostrar():\n    # Crear un campo pasando un arreglo para los campos http://web2py.com/books/default/chapter/29/05/the-views#HTML-helpers\n    # como agregar campos a un formulario https://web2py.wordpress.com/2010/05/01/more-customization-on-forms/\n    opciones = [T("Restart"), T("Create/Delete User"), T("Foo")]\n    test = SELECT(*opciones, **dict(_name="accion", _id="accion") )\n\n    grid = SQLFORM.grid(db1.machine,         csv=False, editable=False, deletable=False,\n        #query = asdasdasdasdasads\n        selectable = lambda ids :\n                        redirect(     URL(  \'maquinas\', \'configurar\', vars=dict(ids=ids)    )  )\n    )\n    grid[1][0].insert(1, test)\n    grid[1][\'_align\'] = "center" # jejeje\n    \n    #GRACIAS!!!!   https://groups.google.com/forum/#!topic/web2py/3kSpuDgo1Lw\n    x = grid[1][0].process()\n    x["_method"] =\'post\'\n    if x.accepted:\n        if x.vars.accion == "Restart":\n            redirect (URL(\'reiniciar\', vars=dict(ids= x.vars.records)))\n        elif x.vars.accion == "Create/Delete User":\n            redirect(URL(\'maquinas\', \'usuarios\'))\n        else:\n            #redirect ( URL(  \'maquinas\', \'configurar\', vars=dict(accion=x.vars.accion, id= x.vars.records) ))\n            print "SE REALIZARA OTRA ACCION"\n    return locals()\n\ndef usuarios():\n    form = SQLFORM.factory(\n        Field(\'New user name\', \'password\', requires=IS_NOT_EMPTY())\n    )\n    form2 = FORM(\n        H1( T(\'New User data:\')),\n        BR(), LABEL(T(\'USER NAME\'), _for=\'name\'),\n        INPUT(_name=\'name\', requires=IS_NOT_EMPTY()),\n        BR(), LABEL(T(\'PASSWORD\'), _for=\'password\'),\n        INPUT(_name=\'password\', _type=\'password\', _tittle=T(\'Minimum lenght is 6 and at least one character must be a capital letter\'), requires=[IS_LENGTH(minsize=6), IS_STRONG(min=6, special=0, upper=1)]),\n        BR(), LABEL(T(\'CONFIRM PASSWORD\'), _for=\'pass2\'),\n        INPUT(_name=\'pass2\', _type=\'password\', requires=[IS_LENGTH(minsize=6), IS_STRONG(min=6, special=0, upper=1), \n            IS_EQUAL_TO(request.vars.password, error_message=\'passwords do not match\')\n        ]),\n        BR(), LABEL(T(\'GROUP\'), _for=\'group\'),\n        INPUT(_name=\'group\'),\n        BR(),\n        INPUT(_type=\'submit\')\n    )\n    return dict(form=form)\n\ndef reiniciar():\n    ids = request.vars["ids"]\n    form = FORM(_method=\'post\').confirm(T(\'Restart\'),{T(\'Back\'):URL(\'mostrar#\')})\n    form["_align"] = "center"\n    pregunta = T(\'Do you really whish to restart the selected machines?\')\n    \n    if form.accepted:\n        print "se reiniciara la maquina"\n        redirect(URL(\'ejecutar\', vars= dict(ids=ids, opcion=\'restart\')))\n        #print tarea\n    return locals()\n\n\ndef ejecutar():\n    #un diccionario con los nombres de los playbooks segun la opcion elegida\n    playbooks= dict(restart=\'reiniciar.yml\')\n    \n    #los ids de las maquinas selccionadas y la opcion elegida\n    ids = request.vars["ids"]\n    opcion = request.vars[\'opcion\']\n    \n    #se crea el nombre de los archivos de la tarea con primerNombre_segundoNombre\n    indentificador = auth.user_id\n    nombres = db1(db1.auth_user.id == indentificador).select(db1.auth_user.first_name,      db1.auth_user.last_name)\n    \n    ruta_basica = os.path.join(request.folder, \'private/Ansible\')\n\n    nombre =  nombres[0]["first_name"] + "_" + nombres[0]["last_name"]\n    \n    trabajos_usuario = db1(db1.job.user_id == auth.user_id).select()\n    #print len(trabajos_usuario)\n    total_trabajos = len(trabajos_usuario)\n    \n    nombre = nombre + \'_\' + str(total_trabajos)\n\n    #se construye un diccionario para ejecutar el playbook\n    variables = dict(\n        nombre= ruta_basica + "/resultados/" + nombre, \n        playbook=ruta_basica + "/Playbooks/" +  playbooks[opcion], \n        hosts= ruta_basica + \'/\' + nombre, \n        variables=None\n    )\n    \n    #se pide al worker o proceso en segundo plano que ejcuta el playbook en maximo 10 minutos\n    tarea = scheduler.queue_task(\n        "playbook", pargs=ids, pvars=variables, stop_time = None, timeout = 300 ,repeats = 1\n    )\n    \n    #se inserta un registro de la tarea en la base de datos con la referencia al campo en la tabla scheduler_task,\n    #dicha tabla maneja los estados de una tarea, registra los errores, guarda los argumentos(parametros en un arreglo)\n    # y las variables(parametros en un diccionario)\n    db1.job.insert(name = nombre, user_id = indentificador, task_id = tarea.id)\n    \n    #db1.commit()\n    redirect(URL(\'maquinas\', \'mostrar\'))\n\nresponse._vars=response._caller(usuarios)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/camilo/Escritorio/repo_git/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/camilo/Escritorio/repo_git/web2py/applications/datos/controllers/maquinas.py", line 121, in <module>\n  File "/home/camilo/Escritorio/repo_git/web2py/gluon/globals.py", line 415, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/camilo/Escritorio/repo_git/web2py/applications/datos/controllers/maquinas.py", line 46, in usuarios\n    Field(\'New user name\', \'password\', requires=IS_NOT_EMPTY())\n  File "/home/camilo/Escritorio/repo_git/web2py/gluon/packages/dal/pydal/objects.py", line 1438, in __init__\n    \'use rname for "funny" names\' % fieldname)\nSyntaxError: Field: invalid field name: New user name, use rname for "funny" names\n'
p11
s.