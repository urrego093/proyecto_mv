(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for long() with base 10: 'None'"
p3
sS'layer'
p4
S'/home/camilo/Escritorio/nuevo_nuevo_repo_git/proyecto_mv/applications/datos/controllers/files.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# intente algo como\n\n@auth.requires_login()\ndef clean_machines(): \n    ids = request.vars["ids"]\n    redirect(URL(\'maquinas\', \'ejecutar\', vars= dict(ids=ids, opcion=\'limpiar\')))\n    return dict(message="hello from files.py")\n\n\n@auth.requires_login()\ndef copiar_archivos():\n    #Recuperamos los ids\n    ids = request.vars["ids"]\n    #recuperamos el path para subir los archivos\n    folder_user = "uploads/" + str(auth.user_id) + "/"\n    ruta_basica = os.path.join(request.folder, folder_user)\n    rows = db1(db1.port_machine.ip_machine==ids).select()\n    for row in rows:\n        HOSTNAME.append(row.hostname);\n    #url = URL(\'download\')\n    # https://groups.google.com/forum/#!topic/web2py/X5xmXyTCavY Checkbox Multiple\n    form = SQLFORM.factory(  Field("archivo", "upload", uploadfolder=ruta_basica, autodelete=True), #widget=SQLFORM.widgets.upload.widget),\n        Field("hostname", "list:string",\n              default=HOSTNAME,widget=SQLFORM.widgets.checkboxes.widget,\n              requires=[IS_IN_SET(HOSTNAME,multiple=True),IS_NOT_EMPTY()]))\n    \n    form.add_button(T(\'Back\'),  redirect(URL(\'files\',\'copiar_archivos\',vars=dict(ids = ids))))\n\n    #var_extra = dict(origen=request.vars.archivo, somelist=request.vars.hostname)\n    var_extra = ""#"origen=" +str("") + "somelist=" + str(request.vars.hostname)\n\n    #print "\\n\\n ********************************** \\n\\n"\n    if form.accepts(request.vars, session):\n        #http://stackoverflow.com/questions/8008213/web2py-upload-with-original-filename todo un d\xc3\xada intentado hacer lo que este chico me soluciono :D\n        coded_name = form.vars.archivo\n        orig_name = request.vars.archivo.filename\n        os.rename(ruta_basica + coded_name, ruta_basica + orig_name)\n        redirect(URL(\'ejecutar\', vars= dict(ids=ids, opcion=\'copyFile\', variables_extra=dict(origen=ruta_basica + orig_name,\n                                                                                             somelist=request.vars.hostname))))\n    return locals()\n\n\n\n@auth.requires_login()\ndef copiar_archivos_subidos():\n    #Recuperamos los ids\n    ids = request.vars["ids"]\n    #recuperamos el path para subir los archivos\n    folder_user = "uploads/" + str(auth.user_id) + "/"\n    ruta_basica = os.path.join(request.folder, folder_user)\n    orig_name =  request.vars.archi\n    rows = db1(db1.port_machine.ip_machine==ids).select()\n    for row in rows:\n        HOSTNAME.append(row.hostname);\n    #url = URL(\'download\')\n    # https://groups.google.com/forum/#!topic/web2py/X5xmXyTCavY Checkbox Multiple\n    form = SQLFORM.factory(  Field("archivo", "string", default = orig_name, writable= False), #widget=SQLFORM.widgets.upload.widget),\n        Field("hostname", "list:string",\n              default=HOSTNAME,widget=SQLFORM.widgets.checkboxes.widget,\n              requires=[IS_IN_SET(HOSTNAME,multiple=True),IS_NOT_EMPTY()]))\n    form.add_button(T(\'Back\'), _href=redirect(request.env.http_referer))\n\n    if form.accepts(request.vars, session):\n        redirect(URL(\'ejecutar\', vars= dict(ids=ids, opcion=\'copyFile\', variables_extra=dict(origen=ruta_basica + orig_name,\n                                                                                             somelist=request.vars.hostname))))\n    return locals()\n\n@auth.requires_login()\ndef list_files():\n    folder_user = "uploads/" + str(auth.user_id) + "/"\n    ruta_basica = os.path.join(request.folder, folder_user)\n    lstDir = os.walk(ruta_basica)\n    #Lista vacia para incluir los ficheros\n    lstFiles = []\n    #Crea una lista de los ficheros jpg que existen en el directorio y los incluye a la lista.\n    for root, dirs, files in lstDir:\n        for fichero in files:\n            (nombreFichero, extension) = os.path.splitext(fichero)\n            lstFiles.append(nombreFichero+extension)\n\n    #res = response.stream(open(pathfilename,\'rb\'), chunk_size=10**6)\n\n    return locals()\n\nresponse._vars=response._caller(copiar_archivos)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/camilo/Escritorio/nuevo_nuevo_repo_git/proyecto_mv/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/camilo/Escritorio/nuevo_nuevo_repo_git/proyecto_mv/applications/datos/controllers/files.py", line 86, in <module>\n  File "/home/camilo/Escritorio/nuevo_nuevo_repo_git/proyecto_mv/gluon/globals.py", line 415, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/camilo/Escritorio/nuevo_nuevo_repo_git/proyecto_mv/gluon/tools.py", line 4231, in f\n    return action(*a, **b)\n  File "/home/camilo/Escritorio/nuevo_nuevo_repo_git/proyecto_mv/applications/datos/controllers/files.py", line 18, in copiar_archivos\n    rows = db1(db1.port_machine.ip_machine==ids).select()\n  File "/home/camilo/Escritorio/nuevo_nuevo_repo_git/proyecto_mv/gluon/packages/dal/pydal/objects.py", line 2020, in select\n    return adapter.select(self.query, fields, attributes)\n  File "/home/camilo/Escritorio/nuevo_nuevo_repo_git/proyecto_mv/gluon/packages/dal/pydal/adapters/base.py", line 1283, in select\n    sql = self._select(query, fields, attributes)\n  File "/home/camilo/Escritorio/nuevo_nuevo_repo_git/proyecto_mv/gluon/packages/dal/pydal/adapters/base.py", line 1170, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "/home/camilo/Escritorio/nuevo_nuevo_repo_git/proyecto_mv/gluon/packages/dal/pydal/adapters/base.py", line 952, in expand\n    rv = op(first, second, **optional_args)\n  File "/home/camilo/Escritorio/nuevo_nuevo_repo_git/proyecto_mv/gluon/packages/dal/pydal/adapters/base.py", line 846, in EQ\n    self.expand(second, first.type))\n  File "/home/camilo/Escritorio/nuevo_nuevo_repo_git/proyecto_mv/gluon/packages/dal/pydal/adapters/base.py", line 962, in expand\n    rv = self.represent(expression, field_type)\n  File "/home/camilo/Escritorio/nuevo_nuevo_repo_git/proyecto_mv/gluon/packages/dal/pydal/adapters/postgres.py", line 351, in represent\n    return BaseAdapter.represent(self, obj, fieldtype)\n  File "/home/camilo/Escritorio/nuevo_nuevo_repo_git/proyecto_mv/gluon/packages/dal/pydal/adapters/base.py", line 1442, in represent\n    return str(long(obj))\nValueError: invalid literal for long() with base 10: \'None\'\n'
p11
s.