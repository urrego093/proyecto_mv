(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> grid() got multiple values for keyword argument 'query'"
p3
sS'layer'
p4
S'/home/camilo/Escritorio/repo_git/proyecto_mv/applications/datos/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\nimport evaluar_expresion\n\ndef index():\n    a = \'usuarioas2, usuario 15-18\'\n    b = evaluar_expresion.evaluar(a)\n    print b\n    response.flash = T("Hello People UD")\n    return locals();\n\n@auth.requires_membership(\'Administrador\')\ndef register_course():\n    form = SQLFORM(db1.course).process()\n    if form.accepted:\n        session.flash = T("Course Create!")\n        redirect(URL(\'index\'))\n    return locals()\n\ndef register_machine():\n    form = SQLFORM(db1.machine).process()\n    if form.accepted:\n        registrar_host(form.vars.id)\n        session.flash = T(" Machine Create!")\n        redirect(URL(\'index\'))\n    return locals()\n\ndef registrar_host(id_machine):\n    for row in P_HOST:\n        db1.port_machine.insert(ip_machine=id_machine, number_port=row)\n        db1.commit()\n    \n@auth.requires_login()\n@auth.requires_membership(\'Administrador\')\ndef agree_teacher():\n    rows = db1(db1.auth_user.registration_key==\'pending\').select()\n    return locals()\n\n\ndef show_teacher():\n    user = db1.auth_user(request.args(0, cast=int))\n    user.update(registration_key=\'\')\n    db1.auth_user.first_name.writable = False\n    db1.auth_user.first_name.reable = False\n    db1.auth_user.last_name.writable = False\n    db1.auth_user.last_name.reable = False\n    form = SQLFORM(db1.auth_user, user, deletable=True, showid=False)\n\n    if form.process(next=URL(\'update_group_teacher\', args=user.id)).accepted:        \n        response.flash = T (\'Teacher accepted\')        \n    elif form.errors:\n        response.flash = T (\'Teacher No Update\')\n    \n\n    \n    return locals()\n\ndef update_group_teacher():\n    member = db1.auth_membership(request.args(0, cast=int) or redirect(URL(\'index\')))\n    if member:\n        member.update(group_id=2)\n        db1.auth_membership.user_id.writable = False\n        db1.auth_membership.user_id.reable = False\n        db1.auth_membership.group_id.writable = False\n        db1.auth_membership.group_id.reable = False    \n        form = SQLFORM(db1.auth_membership, member, showid=False)\n\n        if form.process().accepted:        \n            response.flash = T (\'User Agree to Teacher Group\')\n            redirect(URL(\'agree_teacher\'))\n        elif form.errors:\n            response.flash = T (\'Group No Update\')\n    else:\n        redirect(URL(\'index\'))\n    return locals()\n\ndef mostrar_macxuser():\n    course = db1.course(request.args(1, cast=int) or redirect(URL(\'index\')))\n    machine = db1.machine(request.args(0, cast=int) or redirect(URL(\'index\')))\n    c_group = db1((db1.course_group.cod_course==course.id)& (db1.course_group.id_teacher==auth.user_id)).select()\n    return locals()\n\ndef show_couxuser():\n    id_curso = request.args(0, cast=int)\n    course = db1.course(id_curso or redirect(URL(\'index\')))\n    c_machine= db1((db1.machine.code_course==course.id)).select()\n    courses_text = T("Groups of ")\n    query = db1.course_group.cod_course == id_curso\n    groups = SQLFORM.grid(db1.course_group, query = query,csv=False, editable=False, deletable=False     )\n    return locals()\n\ndef show_ports():\n    semes = request.args(0)\n    course = db1.course(request.args(2, cast=int) or redirect(URL(\'index\')))\n    machine = db1.machine(request.args(1, cast=int) or redirect(URL(\'index\')))\n    num_group = request.args(3) or redirect(URL(\'index\'))\n    port_mac = db1(db1.port_machine.ip_machine==machine.id).select()\n    response.flash = T (num_group)\n    list_port = []\n    \n    for port_m in port_mac:\n        list_est = db1((db1.student_x_machine.ip_machine==port_m.id) &\n                       (db1.student_x_machine.semester==semes)).select(db1.student_x_machine.name_student, db1.student_x_machine.code_student)\n        for l_est in list_est:\n            list_port.append((port_m.number_port, port_m.hostname, l_est.code_student, l_est.name_student))\n\n    return locals()\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\nresponse._vars=response._caller(show_couxuser)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/camilo/Escritorio/repo_git/proyecto_mv/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/camilo/Escritorio/repo_git/proyecto_mv/applications/datos/controllers/default.py", line 153, in <module>\n  File "/home/camilo/Escritorio/repo_git/proyecto_mv/gluon/globals.py", line 415, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/camilo/Escritorio/repo_git/proyecto_mv/applications/datos/controllers/default.py", line 96, in show_couxuser\n    groups = SQLFORM.grid(db1.course_group, query = query,csv=False, editable=False, deletable=False     )\nTypeError: grid() got multiple values for keyword argument \'query\'\n'
p11
s.