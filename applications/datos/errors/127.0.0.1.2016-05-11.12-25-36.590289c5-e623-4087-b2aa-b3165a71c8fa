(dp1
S'output'
p2
S'<type \'exceptions.RuntimeError\'> Failure to connect, tried 5 times:\nTraceback (most recent call last):\n  File "/home/Carlos/Documentos/cloneGit/proyecto_mv/gluon/packages/dal/pydal/base.py", line 446, in __init__\n    self._adapter = ADAPTERS[self._dbname](**kwargs)\n  File "/home/Carlos/Documentos/cloneGit/proyecto_mv/gluon/packages/dal/pydal/adapters/base.py", line 60, in __call__\n    obj = super(AdapterMeta, cls).__call__(*args, **kwargs)\n  File "/home/Carlos/Documentos/cloneGit/proyecto_mv/gluon/packages/dal/pydal/adapters/postgres.py", line 155, in __init__\n    self.reconnect()\n  File "/home/Carlos/Documentos/cloneGit/proyecto_mv/gluon/packages/dal/pydal/connection.py", line 125, in reconnect\n    self.connection = f()\n  File "/home/Carlos/Documentos/cloneGit/proyecto_mv/gluon/packages/dal/pydal/adapters/postgres.py", line 152, in connector\n    return self.driver.connect(**driver_args)\n  File "/home/Carlos/Documentos/cloneGit/proyecto_mv/gluon/contrib/pg8000/__init__.py", line 336, in connect\n    user, host, unix_sock, port, database, password, ssl)\n  File "/home/Carlos/Documentos/cloneGit/proyecto_mv/gluon/contrib/pg8000/core.py", line 1282, in __init__\n    raise self.error\nProgrammingError: (\'FATAL\', \'28P01\', \'la autentificaci\\xc3\\xb3n password fall\\xc3\\xb3 para el usuario \\xc2\\xabpostgres\\xc2\\xbb\')\n'
p3
sS'layer'
p4
S'/home/Carlos/Documentos/cloneGit/proyecto_mv/applications/datos/models/db1.py'
p5
sS'code'
p6
S"# -*- coding: utf-8 -*-\n#Define DAL object, with max 10 connection\n\nfrom gluon.contrib.appconfig import AppConfig\n\ndb1 = DAL(STR_DAL, pool_size=10, migrate=mig)\n## once in production, remove reload=True to gain full speed\nmyconf = AppConfig(reload=True)\n\n## by default give a view/generic.extension to all actions from localhost\n## none otherwise. a pattern can be 'controller/function.extension'\nresponse.generic_patterns = ['*'] if request.is_local else []\n## choose a style for forms\nresponse.formstyle = myconf.take('forms.formstyle')  # or 'bootstrap3_stacked' or 'bootstrap2' or other\nresponse.form_label_separator = myconf.take('forms.separator')\n\n\n#Auth\nfrom gluon.tools import Auth, Service, PluginManager\n\nauth = Auth(db1)\nservice = Service()\nplugins = PluginManager()\n\n## create all tables needed by auth if not custom tables\nauth.define_tables(username=False, signature=False)\n\n## configure email\nmail = auth.settings.mailer\nmail.settings.server = 'logging' if request.is_local else myconf.take('smtp.server')\nmail.settings.sender = myconf.take('smtp.sender')\nmail.settings.login = myconf.take('smtp.login')\n\n## configure auth policy\nauth.settings.registration_requires_verification = False\nauth.settings.registration_requires_approval = True\nauth.settings.reset_password_requires_verification = True\n\n\n#Define tables of model \n\ndb1.define_table('course',\n                Field('code_course','integer', length=3, label = T('Course Code'),requires=IS_NOT_EMPTY()),\n                Field('name_course','string', length=60, label = T('Course Name'), requires=IS_NOT_EMPTY()),\n                Field('description_course','text',label = T('Course Description')),\n                auth.signature)\ndb1.course.code_course.requires=IS_NOT_IN_DB(db1, db1.course.code_course)\n\ndb1.define_table('machine',\n                Field('ip_machine', label=T('IPv4 Machine'), requires=IS_IPV4(minip='10.20.251.1', maxip='10.20.251.255')),\n                Field('code_course','reference course', label=T('Code Course'), requires=IS_IN_DB(db1,db1.course.id, '%(name_course)s', zero=T('Choose One'))),\n                Field('operative_system','string', label=T('Operative System'), requires=IS_IN_SET(OPERA_SYSTEM, zero=T('Select One'), error_message='You no choose one')),\n                Field('memory','string',label=T('Memory RAM'), requires=IS_IN_SET(RAM_MEMORY, zero=T('Select One'), error_message='You no choose one')),\n                Field('processor','string',label=T('Processor'), requires=IS_IN_SET(PROCESSOR, zero=T('Select One'), error_message='You no choose one')),\n                Field('description_machine','text',label=T('Description'),requires=IS_NOT_EMPTY()),\n                auth.signature)\n\ndb1.machine.ip_machine.requires=IS_NOT_IN_DB(db1, db1.machine.ip_machine)\n\n\ndb1.define_table('port_machine',\n                Field('ip_machine','reference machine', label = T('IPv4 Machine'), requires=IS_IN_DB(db1,db1.machine.id, '%(ip_machine)s', zero = T('Select One'))),\n                Field('number_port','string', label = T('Port'), requires=IS_IN_SET(P_HOST, zero = T('Select One'), error_message='You no choose one')),\n                Field('hostname','string',label = T('Hostname'), requires=IS_IN_SET(HOSTNAME, zero = T('Select One'), error_message='You no choose one')),\n                 auth.signature)\n\ndb1.port_machine.number_port.requires=IS_NOT_IN_DB(db1(db1.port_machine.ip_machine==request.vars.ip_machine),\n    'port_machine.number_port')\n\n\ndb1.define_table('course_group',\n               Field('cod_group', 'integer', label = T('Code Group'), requires=IS_NOT_EMPTY()),\n               Field('id_teacher','reference auth_user', label = T('Teacher'), requires=IS_IN_DB(db1,db1.auth_user.id, '%(first_name)s', zero = T('Select One'))),\n               Field('cod_course','reference course', label = T('Course'), requires=IS_IN_DB(db1,db1.course.id, '%(name_course)s', zero = T('Select One'))),\n               Field('semester', 'string', label = T('Semester'), requires=IS_IN_SET(SEMESTER, zero = T('Select One'), error_message='You no choose one')),\n                 auth.signature)\n\ncourses = db1(db1.course_group.cod_course==request.vars.cod_course)\n\ndb1.course_group.cod_group.requires=[IS_NOT_IN_DB(courses(db1.course_group.semester==request.vars.semester), 'course_group.cod_group')]\n\n\n\ndb1.define_table('student_x_machine',\n               Field('ip_machine', 'reference port_machine', requires=IS_IN_DB(db1,db1.port_machine.id, '%(ip_machine)s','%(number_port)s', zero = T('Select One'))),\n               Field('code_student','string', requires=IS_NOT_EMPTY()),\n               Field('name_student','string', requires=IS_NOT_EMPTY()),\n               Field('semester', 'string', label = T('Semester'), requires=IS_IN_SET(SEMESTER, zero = T('Select One'), error_message='You no choose one')),\n                 auth.signature)\n\ndb1.student_x_machine.ip_machine.requires=IS_NOT_IN_DB(db1(db1.student_x_machine.semester==request.vars.semester),\n    'student_x_machine.ip_machine')\n\ndb1.define_table('job',\n    Field('name', 'string', label=T('Job Name'), requires=IS_NOT_EMPTY()),\n    Field('action', 'string', label=T('Action') ),\n    Field('date', 'datetime', default=request.now),\n    Field('user_id', 'reference auth_user', label=T('Teacher'), \n          requires=IS_IN_DB(db1, db1.auth_user.id)   ),\n    Field('task_id' ,label=T('Task ID')), migrate=mig\n                 #,\n   # Field('state', label=T('State'), type='boolean', default=False) # lo maneja la tabla scheduler_task\n)\n\ndb1.job.name.requires=IS_NOT_IN_DB(db1(db1.job.name==request.vars.name), 'job.name')\n"
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/Carlos/Documentos/cloneGit/proyecto_mv/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/Carlos/Documentos/cloneGit/proyecto_mv/applications/datos/models/db1.py", line 6, in <module>\n    db1 = DAL(STR_DAL, pool_size=10, migrate=mig)\n  File "/home/Carlos/Documentos/cloneGit/proyecto_mv/gluon/packages/dal/pydal/base.py", line 174, in __call__\n    obj = super(MetaDAL, cls).__call__(*args, **kwargs)\n  File "/home/Carlos/Documentos/cloneGit/proyecto_mv/gluon/packages/dal/pydal/base.py", line 473, in __init__\n    "Failure to connect, tried %d times:\\n%s" % (attempts, tb)\nRuntimeError: Failure to connect, tried 5 times:\nTraceback (most recent call last):\n  File "/home/Carlos/Documentos/cloneGit/proyecto_mv/gluon/packages/dal/pydal/base.py", line 446, in __init__\n    self._adapter = ADAPTERS[self._dbname](**kwargs)\n  File "/home/Carlos/Documentos/cloneGit/proyecto_mv/gluon/packages/dal/pydal/adapters/base.py", line 60, in __call__\n    obj = super(AdapterMeta, cls).__call__(*args, **kwargs)\n  File "/home/Carlos/Documentos/cloneGit/proyecto_mv/gluon/packages/dal/pydal/adapters/postgres.py", line 155, in __init__\n    self.reconnect()\n  File "/home/Carlos/Documentos/cloneGit/proyecto_mv/gluon/packages/dal/pydal/connection.py", line 125, in reconnect\n    self.connection = f()\n  File "/home/Carlos/Documentos/cloneGit/proyecto_mv/gluon/packages/dal/pydal/adapters/postgres.py", line 152, in connector\n    return self.driver.connect(**driver_args)\n  File "/home/Carlos/Documentos/cloneGit/proyecto_mv/gluon/contrib/pg8000/__init__.py", line 336, in connect\n    user, host, unix_sock, port, database, password, ssl)\n  File "/home/Carlos/Documentos/cloneGit/proyecto_mv/gluon/contrib/pg8000/core.py", line 1282, in __init__\n    raise self.error\nProgrammingError: (\'FATAL\', \'28P01\', \'la autentificaci\\xc3\\xb3n password fall\\xc3\\xb3 para el usuario \\xc2\\xabpostgres\\xc2\\xbb\')\n\n'
p11
s.