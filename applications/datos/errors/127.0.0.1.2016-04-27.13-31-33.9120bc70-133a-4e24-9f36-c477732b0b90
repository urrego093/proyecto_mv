(dp1
S'output'
p2
S"<type 'exceptions.SyntaxError'> Set: no tables selected"
p3
sS'layer'
p4
S'/home/camilo/Escritorio/repo_git/proyecto_mv/applications/datos/controllers/maquinas.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# intente algo como\nimport os\nimport ast\n\n\'\'\'\ndef index():\n    cabezas = ["ip_machine", "code_course", "operative_system", "memory", "processor"]\n    filas =  db1((db1.machine.ip_machine)).select(\n        db1.machine.ip_machine, db1.machine.code_course, db1.machine.operative_system,db1.machine.memory,db1.machine.processor\n    )\n    acciones = [T("Restart"),T("Add user")]\n    return locals()\n\'\'\'\n@auth.requires_login()\ndef mostrar():\n    # Crear un campo pasando un arreglo para los campos http://web2py.com/books/default/chapter/29/05/the-views#HTML-helpers\n    # como agregar campos a un formulario https://web2py.wordpress.com/2010/05/01/more-customization-on-forms/\n    opciones = [T("Restart"), T("Create User(s)"), T("Delete User(s)"),T(\'Change user(s) pass\'), T("Copy Files") ]\n    #test2 = SQLFORM.factory(\n    #    Field(\'accion\',requires=IS_IN_SET(opciones))\n    #)\n    test = SELECT(*opciones, **dict(_name="accion", _id="accion") )\n\n    grid = SQLFORM.grid(db1.machine,         csv=False, editable=False, deletable=False,\n        #query = asdasdasdasdasads\n        selectable = lambda ids :\n                        redirect(     URL(  \'maquinas\', \'configurar\', vars=dict(ids=ids)    )  )\n    )\n    grid[1][0].insert(1, test)\n    #grid[1][0].insert(1, test2)\n    grid[1][\'_align\'] = "center" # jejeje\n\n    #GRACIAS!!!!   https://groups.google.com/forum/#!topic/web2py/3kSpuDgo1Lw\n    #Si no hay maquinas se muere, ya q grid[1][0] queda siendo un div y no es posible llamar process(), corregir~! \n    x = grid[1][0].process()\n    x["_method"] =\'post\'\n    if x.accepted:\n        if x.vars.records:\n            if x.vars.accion == T("Restart"):\n                redirect (URL(\'reiniciar\', vars=dict(ids= x.vars.records)))\n                \n            elif x.vars.accion == T("Create User(s)"):\n                redirect(URL(\'usuarios\', \'crear\' ,vars=dict(ids= x.vars.records)))\n                \n            elif x.vars.accion == T("Delete User(s)"):\n                redirect(URL(\'usuarios\',\'eliminar_usuario\',vars=dict(ids= x.vars.records)))\n                \n            elif x.vars.accion == T(\'Change user(s) pass\'):\n                redirect(URL(\'usuarios\',\'cambiar_pass\',vars=dict(ids= x.vars.records)))\n                \n            elif x.vars.accion == T("Copy Files"):\n                redirect(URL(\'copiar_archivos\',vars=dict(ids= x.vars.records)))\n                \n            \n            else:\n                pass\n        else:\n            response.flash = T(\'Please select at least one machine\')\n            #redirect ( URL(  \'maquinas\', \'configurar\', vars=dict(accion=x.vars.accion, id= x.vars.records) ))\n    #elif x.errors:\n        #response.flash = T(\'Please select at leats one id\')\n    return locals()\n\n@auth.requires_login()\ndef reiniciar():\n    ids = request.vars["ids"]\n    form = FORM(_method=\'post\').confirm(T(\'Restart\'),{T(\'Back\'):URL(\'mostrar#\')})\n    form["_align"] = "center"\n    \n    pregunta = T(\'Do you really whish to restart the selected machines?\')\n    \n    if form.accepted:\n        print "se reiniciara la maquina"\n        redirect(URL(\'ejecutar\', vars= dict(ids=ids, opcion=\'restart\')))\n        #print tarea\n    return locals()\n\n@auth.requires_login()\ndef copiar_archivos():\n    ids = request.vars["ids"]\n    ruta_basica = os.path.join(request.folder, \'uploads/\')\n    HOSTNAME=[\'Carlos\',\'centos\']\n    url = URL(\'download\')\n    # https://groups.google.com/forum/#!topic/web2py/X5xmXyTCavY Checkbox Multiple\n    form = SQLFORM.factory(  Field("archivo", "upload", uploadfolder=ruta_basica, autodelete=True), #widget=SQLFORM.widgets.upload.widget),\n    \n    #form = SQLFORM.factory( Field("archivo", widget=SQLFORM.widgets.upload.widget),\n        Field("hostname", "list:string",\n              default=HOSTNAME,widget=SQLFORM.widgets.checkboxes.widget,\n              requires=[IS_IN_SET(HOSTNAME,multiple=True),IS_NOT_EMPTY()]))\n    form.add_button(T(\'Back\'), URL(\'mostrar#\'))\n\n    #var_extra = dict(origen=request.vars.archivo, somelist=request.vars.hostname)\n    var_extra = ""#"origen=" +str("") + "somelist=" + str(request.vars.hostname)\n\n    print "\\n\\n ********************************** \\n\\n"\n    if request.vars.archivo:\n        var_extra = request.vars.archivo.filename\n    if form.accepts(request.vars, session):\n        #http://stackoverflow.com/questions/8008213/web2py-upload-with-original-filename todo un d\xc3\xada intentado hacer lo que este chico me soluciono :D\n        coded_name = form.vars.archivo\n        orig_name = request.vars.archivo.filename\n        os.rename(ruta_basica + coded_name, ruta_basica + orig_name)\n        redirect(URL(\'ejecutar\', vars= dict(ids=ids, opcion=\'copyFile\', variables_extra=dict(origen=ruta_basica + orig_name,\n                                                                                             somelist=request.vars.hostname))))\n    return locals()\n@auth.requires_login()\ndef lista_maquina_grupo():\n    indentificador = auth.user_id\n\n    user_groups = db1(db1.course_group.id_teacher == indentificador).select( ##los grupos del usuario\n        db1.course_group[\'cod_course\']\n    )\n\n    print " ------------------------------ MATERIAS DEL USUARIO ------------------"\n    materias_ids = []\n    for i in user_groups:\n        materia_id = db1(db1.course.id == i[\'cod_course\']).select().as_dict()\n        #print "comparando.................."\n        if materia_id not in materias_ids:\n            #print "no esta"\n            #print materia_id\n            for llave in materia_id:\n                #print materia_id[llave][\'id\']\n                materias_ids.append(materia_id)\n    print materias_ids\n    \n    materias = db1(db1.course.id in materias_ids).select().as_dict()\n    for llave in materias:\n        print materias[llave]\n    restricciones = dict(course_group= db1.course_group.id_teacher == indentificador)\n    grid = SQLFORM.smartgrid(db1.course,linked_tables=[\'course_group\']\n                             , constraints = {"course_group":db1.course_group.id_teacher== indentificador,\n                                             "course": db1.course in materias_ids\n                                             }\n                            )\n    \n    \'\'\'\n    ids_maquinas = []\n    for id in ids:\n        maquinas = db1(db1.machine.code_course==id).select(\n            #db1.machine.ip_machine\n            db1.machine.id\n        )\n        #maquinas.append(int(maquina[0][\'machine.id\']))\n        for campo in maquinas:\n            ids_maquinas.append(campo[\'id\'])\n        #print maquina[0][\'ip_machine\']\n        #print "------------------\\n",maquina[0][\'machine.id\']\n    for id_maquina in ids_maquinas:\n        print id_maquina\n    #grid = db1(db1.machine.id == ids_maquinas[0]).select()\n    restricciones=dict(machine = db1.machine.id == ids_maquinas[0])\n    grid = SQLFORM.smartgrid(db1.machine,linked_tables=(\'port_machine\'), constraints = restricciones)\n    \'\'\'\n    return locals()\n\ndef ejecutar():\n    #un diccionario con los nombres de los playbooks segun la opcion elegida\n    playbooks= dict(restart=\'reiniciar.yml\', user=\'usuarios2/linux_users.yml\', copyFile=\'copiarArchivo.yml\')\n     \n    #los ids de las maquinas selccionadas y la opcion elegida\n    ids = request.vars["ids"]\n    opcion = request.vars[\'opcion\']\n    variables_extra = request.vars[\'variables_extra\']\n    print str(ids)+ "opcion " + str(playbooks[opcion]) + str(variables_extra) \n    \n    #se crea el nombre de los archivos de la tarea con primerNombre_segundoNombre\n    indentificador = auth.user_id\n    #nombres = db1(db1.auth_user.id == indentificador).select(db1.auth_user.first_name,      db1.auth_user.last_name)\n\n    ruta_basica = os.path.join(request.folder, \'private/Ansible/\')\n\n    trabajos_usuario = db1(db1.job.user_id == auth.user_id).select()\n    total_trabajos = len(trabajos_usuario)\n\n\n    nombre = str(indentificador) + \'_\' + str(total_trabajos)\n\n    #se construye un diccionario para ejecutar el playbook\n    variables = dict(\n        nombre= ruta_basica + "resultados/" + nombre,\n        playbook=ruta_basica + "Playbooks/" +  playbooks[opcion],\n        hosts= ruta_basica + \'\' + nombre,\n        ruta_extra=ruta_basica + "variables/" + nombre,\n        variables=variables_extra\n    )\n    #se pide al worker o proceso en segundo plano que ejcuta el playbook en maximo 10 minutos\n    tarea = scheduler.queue_task(\n        "playbook", pargs=ids, pvars=variables, stop_time = None, timeout = 120 ,repeats = 1\n    )\n    print "id ", str(tarea.id) #id de la tarea \n    #se inserta un registro de la tarea en la base de datos con la referencia al campo en la tabla scheduler_task,\n    #dicha tabla maneja los estados de una tarea, registra los errores, guarda los argumentos(parametros en un arreglo)\n    # y las variables(parametros en un diccionario)\n    db1.job.insert(name = nombre, user_id = indentificador, task_id = tarea.id)\n\n    #db1.commit()\n    redirect(URL(\'maquinas\', \'mostrar\'))\n\nresponse._vars=response._caller(lista_maquina_grupo)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/camilo/Escritorio/repo_git/proyecto_mv/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/camilo/Escritorio/repo_git/proyecto_mv/applications/datos/controllers/maquinas.py", line 202, in <module>\n  File "/home/camilo/Escritorio/repo_git/proyecto_mv/gluon/globals.py", line 415, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/camilo/Escritorio/repo_git/proyecto_mv/gluon/tools.py", line 4231, in f\n    return action(*a, **b)\n  File "/home/camilo/Escritorio/repo_git/proyecto_mv/applications/datos/controllers/maquinas.py", line 129, in lista_maquina_grupo\n    materias = db1(db1.course.id in materias_ids).select().as_dict()\n  File "/home/camilo/Escritorio/repo_git/proyecto_mv/gluon/packages/dal/pydal/objects.py", line 2020, in select\n    return adapter.select(self.query, fields, attributes)\n  File "/home/camilo/Escritorio/repo_git/proyecto_mv/gluon/packages/dal/pydal/adapters/base.py", line 1283, in select\n    sql = self._select(query, fields, attributes)\n  File "/home/camilo/Escritorio/repo_git/proyecto_mv/gluon/packages/dal/pydal/adapters/base.py", line 1102, in _select\n    raise SyntaxError(\'Set: no tables selected\')\nSyntaxError: Set: no tables selected\n'
p11
s.