(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> 'builtin_function_or_method' object has no attribute '__getitem__'"
p3
sS'layer'
p4
S'/home/camilo/Escritorio/repo_git/proyecto_mv/applications/datos/controllers/system.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# intente algo como\nimport evaluar_expresion\n\n\ndef index(): return dict(message="hello from system.py")\n\n@auth.requires_login()\ndef reiniciar():\n    ids = request.vars["ids"]\n    form = FORM(_method=\'post\').confirm(T(\'Restart\'),{T(\'Back\'):URL(\'mostrar#\')})\n    form["_align"] = "center"\n    \n    pregunta = T(\'Do you really whish to restart the selected machines?\')\n    \n    if form.accepted:\n        redirect(URL(\'maquinas\', \'ejecutar\', vars= dict(ids=ids, opcion=\'restart\')))\n        #print tarea\n    return locals()\n\n@auth.requires_login()\ndef install_packages():\n    ids = request.vars["ids"]\n    accion = "install_packages"\n    form = SQLFORM.factory(  Field(\'paquetes\', label=\'Packages\', requires=IS_NOT_EMPTY()) ).process()\n    form[\'_align\'] = "center"\n    if form.accepted:\n        paquetes = request.vars.paquetes\n        paquetes = evaluar_expresion.evaluar(paquetes)\n        #servicio = \'yes\' if request.vars.servicio else \'no\'\n\n        variables_extra = dict( remote=\'all\', paquetes=paquetes, accion=accion)\n                               #, admin=admin)\n        #redirect(URL(\'mostrar\'))\n        redirect(URL(\'maquinas\', \'ejecutar\', vars= dict(ids=ids, opcion=\'paquete\', variables_extra = variables_extra))) ## asi se pasan las variables ingresadas por el usuario\n                       \n    return dict(form=form)\n\n@auth.requires_login()\ndef remove_packages():\n    ids = request.vars["ids"]\n    accion = "remove_packages"\n    form = SQLFORM.factory(  Field(\'paquetes\', label=\'Packages\', requires=IS_NOT_EMPTY())).process()\n    if form.accepted:\n        paquetes = request.vars.paquetes\n        paquetes = evaluar_expresion.evaluar(paquetes)\n        #servicio = \'yes\' if request.vars.servicio else \'no\'\n\n        variables_extra = dict( remote=\'all\', paquetes=paquetes, accion=accion)\n                               #, admin=admin)\n        #redirect(URL(\'mostrar\'))\n        redirect(URL(\'maquinas\', \'ejecutar\', vars= dict(ids=ids, opcion=\'paquete\', variables_extra = variables_extra))) ## asi se pasan las variables ingresadas por el usuario\n    return locals()\n\n@auth.requires_login()\ndef add_repositories():\n    ids = request.vars["ids"]\n    accion = "add_repo"\n    form = SQLFORM.factory(  Field(\'repositorios\', label=\'Repositories\', requires=IS_NOT_EMPTY())).process()\n    if form.accepted:\n        repositorios = request.vars.repositorios\n        repositorios = evaluar_expresion.evaluar(repositorios)\n        #servicio = \'yes\' if request.vars.servicio else \'no\'\n\n        variables_extra = dict( remote=\'all\', repositorios=repositorios, accion=accion)\n                               #, admin=admin)\n        #redirect(URL(\'mostrar\'))\n        redirect(URL(\'maquinas\', \'ejecutar\', vars= dict(ids=ids, opcion=\'paquete\', variables_extra = variables_extra))) ## asi se pasan las variables ingresadas por el usuario           \n    return locals()\n\n@auth.requires_login()\ndef remove_repositories():\n    ids = request.vars["ids"]\n    accion = "remove_repo"\n    form = SQLFORM.factory(  Field(\'repositorios\', label=\'Repositories\', requires=IS_NOT_EMPTY())).process()\n    if form.accepted:\n        repositorios = request.vars.repositorios\n        repositorios = evaluar_expresion.evaluar(repositorios)\n        #servicio = \'yes\' if request.vars.servicio else \'no\'\n\n        variables_extra = dict( remote=\'all\', repositorios=repositorios, accion=accion)\n                               #, admin=admin)\n        #redirect(URL(\'mostrar\'))\n        redirect(URL(\'maquinas\', \'ejecutar\', vars= dict(ids=ids, opcion=\'paquete\', variables_extra = variables_extra))) ## asi se pasan las variables ingresadas por el usuario                       \n    return locals()\n\n@auth.requires_login()\ndef services():\n    ids = request.vars["ids"]\n    variables_extra = dict( remote=\'all\', action=\'check\')\n    \n    redirect(URL(\'maquinas\', \'ejecutar\', vars= dict(ids=ids, opcion=\'services\', variables_extra = variables_extra, is_debug=True)))\n    return dict()\n\n@auth.requires_login()\ndef start_services():\n    services = []\n    ids = request.vars["ids"]\n    form = SQLFORM.factory(\n        Field(\'services\', label=\'Services\', requires=IS_NOT_EMPTY()),\n    ).process()\n\n    if form.accepted:\n        services = request.vars.services\n        services = evaluar_expresion.evaluar(services)\n    \n        variables_extra = dict( remote=\'all\', action=\'start\', services=services)\n    \n        redirect(URL(\'maquinas\', \'ejecutar\', vars= dict(ids=ids, opcion=\'services\', variables_extra = variables_extra)))\n    return locals()\n\n\n@auth.requires_login()\ndef stop_services():\n    ids = request.vars["ids"]\n    form = SQLFORM.factory(\n        Field(\'services\', label=\'Services\', requires=IS_NOT_EMPTY()),\n    ).process()\n\n    if form.accepted:\n        services = request.vars.services\n        services = evaluar_expresion.evaluar(services)\n    \n        variables_extra = dict( remote=\'all\', action=\'stop\', services=services)\n    \n        redirect(URL(\'maquinas\', \'ejecutar\', vars= dict(ids=ids, opcion=\'services\', variables_extra = variables_extra)))\n    return locals()\n\n\n@auth.requires_login()\ndef restart_services():\n    ids = request.vars["ids"]\n    form = SQLFORM.factory(\n        Field(\'services\', label=\'Services\', requires=IS_NOT_EMPTY()),\n    ).process()\n\n    if form.accepted:\n        services = request.vars.services\n        services = evaluar_expresion.evaluar(services)\n    \n        variables_extra = dict( remote=\'all\', action=\'restart\', services=services)\n    \n        redirect(URL(\'maquinas\', \'ejecutar\', vars= dict(ids=ids, opcion=\'services\', variables_extra = variables_extra)))\n    return locals()\n\n@auth.requires_login()\ndef reload_services():\n    ids = request.vars["ids"]\n    form = SQLFORM.factory(\n        Field(\'services\', label=\'Services\', requires=IS_NOT_EMPTY()),\n    ).process()\n\n    if form.accepted:\n        services = request.vars.services\n        services = evaluar_expresion.evaluar(services)\n    \n        variables_extra = dict( remote=\'all\', action=\'reload\', services=services)\n    \n        redirect(URL(\'maquinas\', \'ejecutar\', vars= dict(ids=ids, opcion=\'services\', variables_extra = variables_extra)))\n    return locals()\n\n\n\n\n@auth.requires_login()\ndef tasks_cron():\n\n    #Recuperamos los ids\n    ids = request.vars["ids"]\n    minutos = []\n    minutos.append["*"]\n    minutos+= range(0,60)\n    \n    print minutos\n    form = SQLFORM.factory(Field(\'minute\', label=T(\'Minute\'), requires=IS_IN_SET([\'*\',0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59], zero=\'Select one\', error_message=T(\'\xc2\xa1Demasiado peque\xc3\xb1o o demasiado grande!\'))),\n                           Field(\'hour\', label=T(\'Hour\'), requires=IS_IN_SET([\'*\',0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], zero=\'Select one\',error_message=T(\'\xc2\xa1Demasiado peque\xc3\xb1o o demasiado grande!\'))),\n                           Field(\'day\', label=T(\'Day of Month\'),requires=IS_IN_SET([\'*\',0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], zero=\'Select one\',error_message=T(\'\xc2\xa1Demasiado peque\xc3\xb1o o demasiado grande!\'))),\n                           Field(\'month\', requires=IS_IN_SET((\'*\',\'jan\',\'feb\',\'mar\',\'apr\',\'may\',\'jun\',\'jul\',\'aug\',\'sep\',\'oct\',\'nov\',\'dec\'),\n                                                            zero=\'Select one\' ,error_message=T(\'\xc2\xa1Error!\'))),\n                           Field(\'weekday\', label=T(\'Weekday\'), requires=IS_IN_SET((\'*\',\'sun\',\'mon\',\'tue\',\'wed\',\'thu\',\'fri\',\'sat\'), \n                                                               zero=\'Select one\', error_message=T(\'error\')))\n                          ) \n    form.add_button(T(\'Back\'), URL(\'maquinas\',\'mostrar#\'))\n    if form.process().accepted:\n        response.flash = \'formulario aceptado\'\n        redirect(URL(\'maquinas\',\'ejecutar\', vars= dict(ids=ids, opcion=\'tasks_cron\', variables_extra=dict(minute=request.vars.minute,\n                                                                                                         hour = request.vars.hour,\n                                                                                                         day = request.vars.day,\n                                                                                                         month = request.vars.month,\n                                                                                                         weekday = request.vars.weekday))))\n\n    elif form.errors:\n        response.flash = \'el formulario tiene errores\'\n        #print tarea\n\n\n    return locals()\n\n@auth.requires_login()\ndef ports():\n    ids = request.vars["ids"]\n    variables_extra = dict( remote=\'all\', action=\'check\')\n    \n    redirect(URL(\'maquinas\', \'ejecutar\', vars= dict(ids=ids, opcion=\'ports\', variables_extra = variables_extra, is_debug=True)))\n    return dict()\n\nresponse._vars=response._caller(tasks_cron)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/camilo/Escritorio/repo_git/proyecto_mv/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/camilo/Escritorio/repo_git/proyecto_mv/applications/datos/controllers/system.py", line 207, in <module>\n  File "/home/camilo/Escritorio/repo_git/proyecto_mv/gluon/globals.py", line 415, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/camilo/Escritorio/repo_git/proyecto_mv/gluon/tools.py", line 4231, in f\n    return action(*a, **b)\n  File "/home/camilo/Escritorio/repo_git/proyecto_mv/applications/datos/controllers/system.py", line 171, in tasks_cron\n    minutos.append["*"]\nTypeError: \'builtin_function_or_method\' object has no attribute \'__getitem__\'\n'
p11
s.