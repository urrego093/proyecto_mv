(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> 'NoneType' object has no attribute '__getitem__'"
p3
sS'layer'
p4
S'/home/Carlos/Descargas/web2py/applications/datos/controllers/maquinas.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# intente algo como\nimport os\nimport ast\n\n\'\'\'\ndef index():\n    cabezas = ["ip_machine", "code_course", "operative_system", "memory", "processor"]\n    filas =  db1((db1.machine.ip_machine)).select(\n        db1.machine.ip_machine, db1.machine.code_course, db1.machine.operative_system,db1.machine.memory,db1.machine.processor\n    )\n    acciones = [T("Restart"),T("Add user")]\n    return locals()\n\'\'\'\n\ndef mostrar():\n    # Crear un campo pasando un arreglo para los campos http://web2py.com/books/default/chapter/29/05/the-views#HTML-helpers\n    # como agregar campos a un formulario https://web2py.wordpress.com/2010/05/01/more-customization-on-forms/\n    opciones = [T("Restart"), T("Create User"), T("Delete User"), T("Copy Files")]\n    #test2 = SQLFORM.factory(\n    #    Field(\'accion\',requires=IS_IN_SET(opciones))\n    #)\n    test = SELECT(*opciones, **dict(_name="accion", _id="accion") )\n\n    grid = SQLFORM.grid(db1.machine,         csv=False, editable=False, deletable=False,\n        #query = asdasdasdasdasads\n        selectable = lambda ids :\n                        redirect(     URL(  \'maquinas\', \'configurar\', vars=dict(ids=ids)    )  )\n    )\n    grid[1][0].insert(1, test)\n    #grid[1][0].insert(1, test2)\n    grid[1][\'_align\'] = "center" # jejeje\n\n    #GRACIAS!!!!   https://groups.google.com/forum/#!topic/web2py/3kSpuDgo1Lw\n    x = grid[1][0].process()\n    x["_method"] =\'post\'\n    if x.accepted:\n        if x.vars.records:\n            if x.vars.accion == T("Restart"):\n                redirect (URL(\'reiniciar\', vars=dict(ids= x.vars.records)))\n            elif x.vars.accion == T("Create User"):\n                redirect(URL(\'usuarios\',vars=dict(ids= x.vars.records)))\n            elif x.vars.accion == T("Delete User"):\n                redirect(URL(\'eliminar_usuario\',vars=dict(ids= x.vars.records)))\n            elif x.vars.accion == T("Copy Files"):\n                redirect(URL(\'copiar_archivos\',vars=dict(ids= x.vars.records)))\n            else:\n                pass\n        else:\n            response.flash = T(\'Please select at least one machine\')\n            #redirect ( URL(  \'maquinas\', \'configurar\', vars=dict(accion=x.vars.accion, id= x.vars.records) ))\n    #elif x.errors:\n        #response.flash = T(\'Please select at leats one id\')\n    return locals()\n\ndef usuarios():\n    ids = request.vars["ids"]\n    form = SQLFORM.factory(\n        Field(\'user_name\', label=\'User name\', requires=IS_NOT_EMPTY()),\n        Field(\'password\', \'password\', label=\'Password\', requires=[IS_LENGTH(minsize=6), IS_STRONG(min=6,special=0, upper=1)]),\n        Field(\'confirm_password\', \'password\', label=\'Confirm password\', requires=[\n                IS_STRONG(min=6, special=0, upper=1), IS_EQUAL_TO(request.vars.password, error_message=\'passwords do not match\')]),\n        Field(\'admin\', \'boolean\', label=\'Admin\')\n    ).process()\n\n    if form.accepted:\n        name = request.vars.user_name\n        password = request.vars.password\n        admin = \'yes\' if request.vars.admin else \'no\'\n\n        variables_extra = dict( remote=\'all\', username=name, password=password, admin=admin, action=\'create_user\')\n        redirect(URL(\'ejecutar\', vars= dict(ids=ids, opcion=\'create_user\', variables_extra = variables_extra))) ## asi se pasan las variables ingresadas por el usuario\n\n    return dict(form=form)\n\ndef eliminar_usuario():\n    ids = request.vars["ids"]\n    form = SQLFORM.factory(\n        Field(\'user_name\', label=T(\'User name\'), requires=IS_NOT_EMPTY())\n    ).process()\n\n    if form.accepted:\n        name = request.vars.user_name\n        variables_extra = dict( remote=\'all\', username=name, action=\'delete_user\')\n        redirect(URL(\'ejecutar\', vars= dict(ids=ids, opcion="delete_user", variables_extra = variables_extra)))\n    return dict(form= form)\n\ndef reiniciar():\n    ids = request.vars["ids"]\n    form = FORM(_method=\'post\').confirm(T(\'Restart\'),{T(\'Back\'):URL(\'mostrar#\')})\n    form["_align"] = "center"\n    \n    pregunta = T(\'Do you really whish to restart the selected machines?\')\n    \n    if form.accepted:\n        print "se reiniciara la maquina"\n        redirect(URL(\'ejecutar\', vars= dict(ids=ids, opcion=\'restart\')))\n        #print tarea\n    return locals()\n\ndef get_path(filename,folder=\'uploads\'):\n    #Get full path to file stored in uploads\n    f=filename.split(\'.\')\n    path=os.path.join(request.folder,folder,\n                      \'%s.%s\'%(f[0],f[1]),\n                      \'%c%c\'%(f[2][0],f[2][1]),\n                      filename)\n    return path\n\ndef copiar_archivos():\n    ids = request.vars["ids"]\n    \n    \'\'\'def get_path(filename,folder=\'uploads\'):\n  #Get full path to file stored in uploads\n  f=filename.split(\'.\')\n  path=os.path.join(request.folder,folder,\n        \'%s.%s\'%(f[0],f[1]),\n        \'%c%c\'%(f[2][0],f[2][1]),\n        filename)\n  return path\'\'\'\n    ruta_basica = os.path.join(request.folder, \'uploads/\')\n    \n    # https://groups.google.com/forum/#!topic/web2py/X5xmXyTCavY Checkbox Multiple\n    form = SQLFORM.factory( Field("archivo", "upload", uploadfolder=ruta_basica), #widget=SQLFORM.widgets.upload.widget),\n        Field("hostname", "list:string",\n              default=HOSTNAME,widget=SQLFORM.widgets.checkboxes.widget,\n              requires=[IS_IN_SET(HOSTNAME,multiple=True),IS_NOT_EMPTY()]))\n    form.add_button(T(\'Back\'), URL(\'mostrar#\'))\n    print "host" + str(request.vars[\'hostname\']) + "archivo" + str(request.vars.archivo[1]) \n    print "\\n\\n ********************************** \\n\\n"\n    if form.accepts(request.vars):\n        #print "host" + str(request.vars[\'hostname\']) + "archivo" + str(get_path(request.vars[\'archivo\'])) \n        #print "\\n\\n ********************************** \\n\\n"\n        redirect(URL(\'ejecutar\', vars= dict(ids=ids, opcion=\'copyFile\', variables_extra=request.vars.hostname )))\n    return locals()\n\ndef ejecutar():\n    #un diccionario con los nombres de los playbooks segun la opcion elegida\n    playbooks= dict(restart=\'reiniciar.yml\', create_user=\'usuarios/linux_users.yml\', delete_user=\'usuarios/linux_users.yml\', copyFile=\'copiarArchivo.yml\')\n     \n    #los ids de las maquinas selccionadas y la opcion elegida\n    ids = request.vars["ids"]\n    opcion = request.vars[\'opcion\']\n    variables_extra = request.vars[\'variables_extra\']\n    print str(ids)+ "opcion " + str(playbooks[opcion]) \n    #se crea el nombre de los archivos de la tarea con primerNombre_segundoNombre\n    indentificador = auth.user_id\n    #nombres = db1(db1.auth_user.id == indentificador).select(db1.auth_user.first_name,      db1.auth_user.last_name)\n\n    ruta_basica = os.path.join(request.folder, \'private/Ansible/\')\n\n    trabajos_usuario = db1(db1.job.user_id == auth.user_id).select()\n    total_trabajos = len(trabajos_usuario)\n\n\n    nombre = str(indentificador) + \'_\' + str(total_trabajos)\n\n    #se construye un diccionario para ejecutar el playbook\n    variables = dict(\n        nombre= ruta_basica + "resultados/" + nombre,\n        playbook=ruta_basica + "Playbooks/" +  playbooks[opcion],\n        hosts= ruta_basica + \'\' + nombre,\n        ruta_extra=ruta_basica + "variables/" + nombre,\n        variables=variables_extra\n    )\n    \n    \n\n    #se pide al worker o proceso en segundo plano que ejcuta el playbook en maximo 10 minutos\n    tarea = scheduler.queue_task(\n        "playbook", pargs=ids, pvars=variables, stop_time = None, timeout = 120 ,repeats = 1\n    )\n    print "id " + str(tarea.id)\n    #se inserta un registro de la tarea en la base de datos con la referencia al campo en la tabla scheduler_task,\n    #dicha tabla maneja los estados de una tarea, registra los errores, guarda los argumentos(parametros en un arreglo)\n    # y las variables(parametros en un diccionario)\n    db1.job.insert(name = nombre, user_id = indentificador, task_id = tarea.id)\n\n    #db1.commit()\n    redirect(URL(\'maquinas\', \'mostrar\'))\n\nresponse._vars=response._caller(copiar_archivos)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/Carlos/Descargas/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/Carlos/Descargas/web2py/applications/datos/controllers/maquinas.py", line 182, in <module>\n  File "/home/Carlos/Descargas/web2py/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/Carlos/Descargas/web2py/applications/datos/controllers/maquinas.py", line 129, in copiar_archivos\n    print "host" + str(request.vars[\'hostname\']) + "archivo" + str(request.vars.archivo[1])\nTypeError: \'NoneType\' object has no attribute \'__getitem__\'\n'
p11
s.